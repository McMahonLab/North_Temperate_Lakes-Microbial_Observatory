hypo <- year_subset("08", hypo)
#Calculate observed richness
hypo.even <- apply(hypo, 2, pielou)
#Extract sampling date from sample names
hypo.date <- extract_date(colnames(hypo))
#Make dataframe for plotting
NS_evenness <- data.frame(hypo.date, hypo.even)
colnames(NS_evenness) <- c("date", "evenness")
png(file = paste(path2repo, "FigureS2_TBHeven.png", sep = ""), width = 4, height = 3, units = "in", res = 144)
ggplot() + geom_line(data = NS_evenness, aes(x = date, y=evenness), size = 1) + labs(title = "North Sparkling Bog", x = NULL, y = "Pielou's Evenness") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 8, colour = "black"), axis.title = element_text(size = 12, vjust = 2), axis.text.y = element_text(colour = "black", size = 8), plot.title = element_text(size = 12, vjust = 2)) + geom_point(data = NS_evenness[match(NSHmixes, NS_evenness$date), ], aes(x = date, y = evenness), size = 5, colour = "red")
dev.off()
# Identify mixing dates (less than 1 degree of temperature difference between 0.5 meters and maximum sampling depth)
metalakes <- substr(metadata$Sample_Name, start = 1, stop = 3)
metayears <- substr(metadata$Sample_Name, start = 9, stop = 10)
metaTBH <- metadata[which(metalakes == "TBH" & metayears == "07"), c(1,2,4)]
metaTBH <- dcast(metaTBH, Sample_Name~Depth, fun.aggregate=mean)
TBHmixes <- extract_date(metaTBH$Sample_Name[which(metaTBH$"0.5" - metaTBH$"7" < 1)])
# Make dataset of Trout Bog hypolimion samples from 2007
hypo <- bog_subset(paste("TBH", sep = ""), otu_table)
hypo <- year_subset("07", hypo)
#Calculate observed richness
hypo.even <- apply(hypo, 2, pielou)
#Extract sampling date from sample names
hypo.date <- extract_date(colnames(hypo))
#Remove January samples - large gap distracts in plot, and winter samples are not considered in this study
hypo.even <- hypo.even[c(1:32, 35:80)]
hypo.date <- hypo.date[c(1:32, 35:80)]
# Make dataframe for plotting
TB_evenness <- data.frame(hypo.date, hypo.even)
colnames(TB_evenness) <- c("date", "evenness")
png(file = paste(path2repo, "FigureS2_TBHeven.png", sep = ""), width = 4, height = 3, units = "in", res = 144)
ggplot() + geom_line(data = TB_evenness, aes(x = date, y=evenness), size = 1) + labs(title = "Trout Bog", x = NULL, y = "Pielou's Evenness") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 8, colour = "black"), axis.title = element_text(size = 12, vjust = 2), axis.text.y = element_text(colour = "black", size = 8), plot.title = element_text(size = 12, vjust = 2)) + geom_point(data = TB_evenness[match(TBHmixes, TB_evenness$date), ], aes(x = date, y = evenness), size = 5, colour = "red")
dev.off()
# Repeat with North Sparkling, 2008
metaNSH <- metadata[which(metalakes == "NSH" & metayears == "08"), c(1,2,4)]
metaNSH <- dcast(metaNSH, Sample_Name~Depth, fun.aggregate=mean)
NSHmixes <- extract_date(metaNSH$Sample_Name[which(metaNSH$"0.5" - metaNSH$"4" < 1)])
#Make dataset of Trout Bog hypolimion samples from 2008
hypo <- bog_subset(paste("NSH", sep = ""), otu_table)
hypo <- year_subset("08", hypo)
#Calculate observed richness
hypo.even <- apply(hypo, 2, pielou)
#Extract sampling date from sample names
hypo.date <- extract_date(colnames(hypo))
#Make dataframe for plotting
NS_evenness <- data.frame(hypo.date, hypo.even)
colnames(NS_evenness) <- c("date", "evenness")
png(file = paste(path2repo, "FigureS2_NSHeven.png", sep = ""), width = 4, height = 3, units = "in", res = 144)
ggplot() + geom_line(data = NS_evenness, aes(x = date, y=evenness), size = 1) + labs(title = "North Sparkling Bog", x = NULL, y = "Pielou's Evenness") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 8, colour = "black"), axis.title = element_text(size = 12, vjust = 2), axis.text.y = element_text(colour = "black", size = 8), plot.title = element_text(size = 12, vjust = 2)) + geom_point(data = NS_evenness[match(NSHmixes, NS_evenness$date), ], aes(x = date, y = evenness), size = 5, colour = "red")
dev.off()
archaea <- grep("Archaea", rownames(phylum_table))
phylum_table <- reduce_names(phylum_table)
# Sum total observations of each phylum in the full dataset and sort by abundance
totals <- rowSums(phylum_table)
totals <- sort(totals)
# Remove the "p__" phylum designation from phylum names. This looks better for plotting.
get.names <- strsplit(names(totals), "p__")
phyla.names <- c()
for(i in 1:length(get.names)){
phyla.names[i] <- get.names[[i]][2]
}
phyla.names[23] <- "unclassified Archaea"
phyla.names[30] <- "unclassified"
phyla.names[45] <- "unclassified Bacteria"
# Set up a dataframe for plotting in ggplot2. Set the phyla.names to factors, with levels in order of abundance.
phylum_totals <- data.frame(phyla.names, totals)
phylum_totals$phyla.names <- factor(phylum_totals$phyla.names, levels = phylum_totals$phyla.names[order(phylum_totals$totals)])
png(file = paste(path2repo, "FigureS3_phylum_barplot.png", sep = ""), width = 4, height = 3, units = "in", res = 144)
ggplot(data=phylum_totals, aes(x = phyla.names, y = totals)) + geom_bar(stat = "identity", fill = "grey", colour="black") + labs(x = NULL, y = "Log of Observed Reads") + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 12, colour = "black"), axis.title = element_text(size = 15, vjust=1.2), plot.title = element_text(size = 20), axis.text.y = element_text(colour="black")) + scale_y_log10(expand = c(0,0)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
dev.off)
dev.off()
png(file = paste(path2repo, "FigureS3_phylum_barplot.png", sep = ""), width = 5, height = 6, units = "in", res = 144)
ggplot(data=phylum_totals, aes(x = phyla.names, y = totals)) + geom_bar(stat = "identity", fill = "grey", colour="black") + labs(x = NULL, y = "Log of Observed Reads") + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 12, colour = "black"), axis.title = element_text(size = 15, vjust=1.2), plot.title = element_text(size = 20), axis.text.y = element_text(colour="black")) + scale_y_log10(expand = c(0,0)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
dev.off()
png(file = paste(path2repo, "FigureS3_phylum_barplot.png", sep = ""), width = 8, height = 6, units = "in", res = 144)
ggplot(data=phylum_totals, aes(x = phyla.names, y = totals)) + geom_bar(stat = "identity", fill = "grey", colour="black") + labs(x = NULL, y = "Log of Observed Reads") + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 12, colour = "black"), axis.title = element_text(size = 15, vjust=1.2), plot.title = element_text(size = 20), axis.text.y = element_text(colour="black")) + scale_y_log10(expand = c(0,0)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
dev.off()
layer <- c("CBE", "FBE", "WSE", "NSE", "TBE", "SSE", "HKE", "MAE", "CBH", "FBH", "WSH", "NSH", "TBH",  "SSH", "HKH", "MAH")
# Set up a dataframe with the totals of each phylum for each sampling site
layer.phyla <- rep(NA, dim(phylum_table)[1])
for(i in 1:length(layer)){
dataset <- bog_subset(layer[i], phylum_table)
layer.phyla <- cbind(layer.phyla, rowSums(dataset))
}
layer.phyla <- layer.phyla[,2:dim(layer.phyla)[2]]
colnames(layer.phyla) <- layer
# Combine low abundance phyla into a single category called "other"
abun <- layer.phyla[which(rowSums(layer.phyla) >= 10000),]
other <- layer.phyla[which(rowSums(layer.phyla) < 10000),]
new.layer <- rbind(abun, colSums(other))
# Shorten up those names again and remove extraneous rownames
get.names <- strsplit(rownames(new.layer), "p__")
phyla.names <- c()
for(i in 1:length(get.names)){
phyla.names[i] <- get.names[[i]][2]
}
phyla.names[8] <- "unclassifed"
phyla.names[14] <- "other"
phyla.names <- factor(phyla.names, levels = rev(phyla.names))
rownames(new.layer) <- NULL
# Convert data into a long format dataframe for use in ggplot
phyla_by_bog <- data.frame(phyla.names, new.layer)
phyla_by_bog2 <- melt(phyla_by_bog)
# Create color palette that can handle the large number of categories
pal2 = c("#005682", "#edfb48", "#a1a100", "#626262", "#008141", "#008282", "#00d5f2", "#f2a400", "#209401", "#929292", "#3885e7", "#ff8400", "#391826", "#f4bebe")
png(file = paste(path2repo, "FigureS4_phylum_stackedbars.png", sep = ""), width = 6, height = 5, units = "in", res = 144)
ggplot(data=phyla_by_bog2, aes(x=variable, y=value, fill=phyla.names)) + geom_bar(stat="identity", position = "fill") + labs(x = NULL, y = "Proportion of Observed Reads") + theme(axis.text.x = element_text(size = 12, angle = 90, color="black"), axis.text.y = element_text(size=14, color="black"), axis.title = element_text(size = 15, vjust=2), legend.title = element_blank(), legend.text = element_text(size = 16)) + scale_fill_manual(values=rev(pal2)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))  + scale_y_continuous(expand = c(0,0))
dev.off()
png(file = paste(path2repo, "FigureS4_phylum_stackedbars.png", sep = ""), width = 8, height = 5, units = "in", res = 144)
ggplot(data=phyla_by_bog2, aes(x=variable, y=value, fill=phyla.names)) + geom_bar(stat="identity", position = "fill") + labs(x = NULL, y = "Proportion of Observed Reads") + theme(axis.text.x = element_text(size = 12, angle = 90, color="black"), axis.text.y = element_text(size=14, color="black"), axis.title = element_text(size = 15, vjust=2), legend.title = element_blank(), legend.text = element_text(size = 16)) + scale_fill_manual(values=rev(pal2)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))  + scale_y_continuous(expand = c(0,0))
dev.off()
epi_clade_table <- bog_subset("..E", clade_table)
# Remove taxonomic level tags at the beginning of some names (present in Greengenes classified clades)
rownames(epi_clade_table) <- make.unique(gsub("[kpcofg]__|\\[|\\]|Bacteria;", "", rownames(epi_clade_table)))
# Keep only clades that are completely classified
splitnames<- strsplit(rownames(epi_clade_table), ";")
clades_only <- c()
for(i in 1:length(splitnames)){
clades_only[i] <- splitnames[[i]][5]
}
epi_clade_table2 <- epi_clade_table[which(clades_only != "unclassified" & is.na(clades_only) == F),]
epi_clade_table2 <- reduce_names(epi_clade_table2)
# Sum total abundances of epilimnion clades
epi_clade_sums <- sort(rowSums(epi_clade_table2), decreasing = T)
# Make dataframe of the 20 most abundant epilimnion clades for plotting
plot_epi_clades <- data.frame(names(epi_clade_sums)[1:20], epi_clade_sums[1:20])
colnames(plot_epi_clades) <- c("Clade", "Abundance")
plot_epi_clades$Clade <- factor(plot_epi_clades$Clade, levels=plot_epi_clades$Clade)
ggplot(data = plot_epi_clades, aes(x = Clade, y = Abundance)) + geom_bar(stat = "identity", fill = "grey", colour = "black") + labs(x = NULL, y = "Observed Reads", title = "Epilimnia") + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 12, colour = "black"), axis.title = element_text(size = 12, vjust=2), axis.text.y = element_text(colour="black")) + scale_y_continuous(expand = c(0,0)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
png(file = paste(path2repo, "FigureS4_phylum_stackedbars.png", sep = ""), width = 7, height = 4, units = "in", res = 144)
ggplot(data = plot_epi_clades, aes(x = Clade, y = Abundance)) + geom_bar(stat = "identity", fill = "grey", colour = "black") + labs(x = NULL, y = "Observed Reads", title = "Epilimnia") + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 12, colour = "black"), axis.title = element_text(size = 12, vjust=2), axis.text.y = element_text(colour="black")) + scale_y_continuous(expand = c(0,0)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
dev.off()
# Specify the sampled layers
layer <- c("CBE", "FBE", "WSE", "NSE", "TBE", "SSE", "HKE", "MAE", "CBH", "FBH", "WSH", "NSH", "TBH",  "SSH", "HKH", "MAH")
# Set up a dataframe with the totals of each phylum for each sampling site
layer.phyla <- rep(NA, dim(phylum_table)[1])
for(i in 1:length(layer)){
dataset <- bog_subset(layer[i], phylum_table)
layer.phyla <- cbind(layer.phyla, rowSums(dataset))
}
layer.phyla <- layer.phyla[,2:dim(layer.phyla)[2]]
colnames(layer.phyla) <- layer
# Combine low abundance phyla into a single category called "other"
abun <- layer.phyla[which(rowSums(layer.phyla) >= 10000),]
other <- layer.phyla[which(rowSums(layer.phyla) < 10000),]
new.layer <- rbind(abun, colSums(other))
# Shorten up those names again and remove extraneous rownames
get.names <- strsplit(rownames(new.layer), "p__")
phyla.names <- c()
for(i in 1:length(get.names)){
phyla.names[i] <- get.names[[i]][2]
}
phyla.names[8] <- "unclassifed"
phyla.names[14] <- "other"
phyla.names <- factor(phyla.names, levels = rev(phyla.names))
rownames(new.layer) <- NULL
# Convert data into a long format dataframe for use in ggplot
phyla_by_bog <- data.frame(phyla.names, new.layer)
phyla_by_bog2 <- melt(phyla_by_bog)
# Create color palette that can handle the large number of categories
pal2 = c("#005682", "#edfb48", "#a1a100", "#626262", "#008141", "#008282", "#00d5f2", "#f2a400", "#209401", "#929292", "#3885e7", "#ff8400", "#391826", "#f4bebe")
# Plot data as a stacked barplot
png(file = paste(path2repo, "FigureS4_phylum_stackedbars.png", sep = ""), width = 8, height = 5, units = "in", res = 144)
ggplot(data=phyla_by_bog2, aes(x=variable, y=value, fill=phyla.names)) + geom_bar(stat="identity", position = "fill") + labs(x = NULL, y = "Proportion of Observed Reads") + theme(axis.text.x = element_text(size = 12, angle = 90, color="black"), axis.text.y = element_text(size=14, color="black"), axis.title = element_text(size = 15, vjust=2), legend.title = element_blank(), legend.text = element_text(size = 16)) + scale_fill_manual(values=rev(pal2)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))  + scale_y_continuous(expand = c(0,0))
dev.off()
png(file = paste(path2repo, "FigureS5_epi_clade_abun.png", sep = ""), width = 7, height = 4, units = "in", res = 144)
ggplot(data = plot_epi_clades, aes(x = Clade, y = Abundance)) + geom_bar(stat = "identity", fill = "grey", colour = "black") + labs(x = NULL, y = "Observed Reads", title = "Epilimnia") + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 12, colour = "black"), axis.title = element_text(size = 12, vjust=2), axis.text.y = element_text(colour="black")) + scale_y_continuous(expand = c(0,0)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
dev.off()
png(file = paste(path2repo, "FigureS5_epi_clade_abun.png", sep = ""), width = 7, height = 6, units = "in", res = 144)
ggplot(data = plot_epi_clades, aes(x = Clade, y = Abundance)) + geom_bar(stat = "identity", fill = "grey", colour = "black") + labs(x = NULL, y = "Observed Reads", title = "Epilimnia") + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 12, colour = "black"), axis.title = element_text(size = 12, vjust=2), axis.text.y = element_text(colour="black")) + scale_y_continuous(expand = c(0,0)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
dev.off()
png(file = paste(path2repo, "FigureS5_epi_clade_abun.png", sep = ""), width = 7, height = 5, units = "in", res = 144)
ggplot(data = plot_epi_clades, aes(x = Clade, y = Abundance)) + geom_bar(stat = "identity", fill = "grey", colour = "black") + labs(x = NULL, y = "Observed Reads", title = "Epilimnia") + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 12, colour = "black"), axis.title = element_text(size = 12, vjust=2), axis.text.y = element_text(colour="black")) + scale_y_continuous(expand = c(0,0)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
dev.off()
metadata$Sample_Name <- as.character(metadata$Sample_Name)
metalakes <- substr(metadata$Sample_Name, start=1, stop=3)
metayears <- substr(metadata$Sample_Name, start=9, stop=10)
# Identify mixed dates from dimictic lakes
metaTBH <- metadata[which(metalakes == "TBH" & metayears == "07"), c(1,2,4)]
metaTBH <- dcast(metaTBH, Sample_Name~Depth, fun.aggregate=mean)
TBHmixes <- metaTBH$Sample_Name[which(metaTBH$"0.5" - metaTBH$"7" < 1)]
metaNSH <- metadata[which(metalakes == "NSH" & metayears == "07"), c(1,2,4)]
metaNSH <- dcast(metaNSH, Sample_Name~Depth, fun.aggregate=mean)
NSHmixes <- metaNSH$Sample_Name[which(metaNSH$"0.5" - metaNSH$"4" < 1)]
metaSSH <- metadata[which(metalakes == "SSH" & metayears == "07"), c(1,2,4)]
metaSSH <- dcast(metaSSH, Sample_Name~Depth, fun.aggregate=mean)
SSHmixes <- metaSSH$Sample_Name[which(metaSSH$"0.5" - metaSSH$"8" < 1)]
mixes <- c(TBHmixes, NSHmixes, SSHmixes)
# Remove mixed dates from table of dimictic and meromictic hypolimnion samples
hypo_clade_table <- bog_subset("TBH|SSH|NSH|MAH|HKH", clade_table)
hits <- match(mixes, substr(colnames(hypo_clade_table), start = 1, stop = 10))
hypo_clade_table <- hypo_clade_table[, -hits]
# Remove taxonomic level tags at the beginning of some names (present in Greengenes classified clades)
rownames(hypo_clade_table) <- make.unique(gsub("[kpcofg]__|\\[|\\]|Bacteria;", "", rownames(hypo_clade_table)))
splitnames<- strsplit(rownames(hypo_clade_table), ";")
clades_only <- c()
for(i in 1:length(splitnames)){
clades_only[i] <- splitnames[[i]][5]
}
hypo_clade_table2 <- hypo_clade_table[which(clades_only != "unclassified" & is.na(clades_only) == F),]
hypo_clade_table2 <- reduce_names(hypo_clade_table2)
# Plot rank abundance curve for 20 most abundant hypolimnion clades
hypo_clade_sums <- sort(rowSums(hypo_clade_table2), decreasing = T)
plot_hypo_clades <- data.frame(names(hypo_clade_sums)[1:20], hypo_clade_sums[1:20])
colnames(plot_hypo_clades) <- c("Clade", "Abundance")
plot_hypo_clades$Clade <- factor(plot_hypo_clades$Clade, levels=plot_hypo_clades$Clade)
png(file = paste(path2repo, "FigureS5_hypo_clade_abun.png", sep = ""), width = 7, height = 5, units = "in", res = 144)
ggplot(data = plot_hypo_clades, aes(x = Clade, y = Abundance)) + geom_bar(stat = "identity", fill = "grey", colour="black") + labs(x = NULL, y = "Observed Reads", title = "Hypolimnia") + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 12, colour = "black"), axis.title = element_text(size = 12, vjust = 2), axis.text.y = element_text(colour = "black")) + scale_y_continuous(expand = c(0,0)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
dev.off()
all.network <- read.table(file = "C:/Users/Alex/Desktop/North_Temperate_Lakes-Microbial_Observatory/Network_analysis/allsamples_network_28Jan16.txt", header = T)
TBH <- bog_subset("TBH", otu_table)
NSH <- bog_subset("NSH", otu_table)
MAH <- bog_subset("MAH", otu_table)
SSH <- bog_subset("SSH", otu_table)
CBH <- bog_subset("CBH", otu_table)
all.edges <- table(c(as.character(all.network$index1), as.character(all.network$index2)))
TBH.nodes <- match(names(all.edges), rownames(TBH))
TBH.conn <- TBH[TBH.nodes,]
TBH.edges <- all.edges[match(rownames(TBH.conn), names(all.edges))]
TBH.corr <- c()
for(i in 1:length(TBH.edges)){
hits <- which(all.network$index1 == names(TBH.edges)[i] | all.network$index2 == names(TBH.edges)[i])
TBH.corr[i] <- mean(all.network$LSA[hits])
}
TBH.quant <- TBH.edges * TBH.corr
TBH.metric <- colSums(sweep(TBH.conn, 1, TBH.quant, "*"))
TBH.dates <- extract_date(colnames(TBH))
NSH.nodes <- match(names(all.edges), rownames(NSH))
NSH.conn <- NSH[NSH.nodes,]
NSH.edges <- all.edges[match(rownames(NSH.conn), names(all.edges))]
NSH.corr <- c()
for(i in 1:length(NSH.edges)){
hits <- which(all.network$index1 == names(NSH.edges)[i] | all.network$index2 == names(NSH.edges)[i])
NSH.corr[i] <- mean(all.network$LSA[hits])
}
NSH.quant <- NSH.edges * NSH.corr
NSH.metric <- colSums(sweep(NSH.conn, 1, NSH.quant, "*"))
NSH.dates <- extract_date(colnames(NSH))
MAH.nodes <- match(names(all.edges), rownames(MAH))
MAH.conn <- MAH[MAH.nodes,]
MAH.edges <- all.edges[match(rownames(MAH.conn), names(all.edges))]
MAH.corr <- c()
for(i in 1:length(MAH.edges)){
hits <- which(all.network$index1 == names(MAH.edges)[i] | all.network$index2 == names(MAH.edges)[i])
MAH.corr[i] <- mean(all.network$LSA[hits])
}
MAH.quant <- MAH.edges * MAH.corr
MAH.metric <- colSums(sweep(MAH.conn, 1, MAH.quant, "*"))
MAH.dates <- extract_date(colnames(MAH))
CBH.nodes <- match(names(all.edges), rownames(CBH))
CBH.conn <- CBH[CBH.nodes,]
CBH.edges <- all.edges[match(rownames(CBH.conn), names(all.edges))]
CBH.corr <- c()
for(i in 1:length(CBH.edges)){
hits <- which(all.network$index1 == names(CBH.edges)[i] | all.network$index2 == names(CBH.edges)[i])
CBH.corr[i] <- mean(all.network$LSA[hits])
}
CBH.quant <- CBH.edges * CBH.corr
CBH.metric <- colSums(sweep(CBH.conn, 1, CBH.quant, "*"))
CBH.dates <- extract_date(colnames(CBH))
SSH.nodes <- match(names(all.edges), rownames(SSH))
SSH.conn <- SSH[SSH.nodes,]
SSH.edges <- all.edges[match(rownames(SSH.conn), names(all.edges))]
SSH.corr <- c()
for(i in 1:length(SSH.edges)){
hits <- which(all.network$index1 == names(SSH.edges)[i] | all.network$index2 == names(SSH.edges)[i])
SSH.corr[i] <- mean(all.network$LSA[hits])
}
SSH.quant <- SSH.edges * SSH.corr
SSH.metric <- colSums(sweep(SSH.conn, 1, SSH.quant, "*"))
SSH.dates <- extract_date(colnames(SSH))
all.metric <- c(TBH.metric, NSH.metric, MAH.metric, CBH.metric, SSH.metric)
all.dates <- c(TBH.dates, NSH.dates, MAH.dates, CBH.dates, SSH.dates)
lakekey <- c(rep("TBH", length(TBH.metric)), rep("NSH", length(NSH.metric)), rep("MAH", length(MAH.metric)), rep("CBH", length(CBH.metric)), rep("SSH", length(SSH.metric)))
plot.conn <- data.frame(lakekey, all.dates, all.metric)
colnames(plot.conn) <- c("Lake", "Date", "Connectivity")
plot.conn$Lake <- factor(plot.conn$Lake, levels = c("CBH", "NSH", "TBH", "SSH", "MAH"))
ggplot(data = plot.conn, aes(x = Lake, y = Connectivity)) + geom_boxplot() + scale_y_log10() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.text = element_text(colour = "black"))
png(file = paste(path2repo, "FigureS6_connectivity.png", sep = ""), width = 5, height = 5, units = "in", res = 144)
ggplot(data = plot.conn, aes(x = Lake, y = Connectivity)) + geom_boxplot() + scale_y_log10() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.text = element_text(colour = "black"))
dev.off()
d <- dist.dna(seqs, model = "raw")
bogtree <- nj(d)
years <- c("05", "07", "08", "09")
colors <- c("#a6cee3", "#1f78b4", "#33a02c", "#b2df8a")
# Make OTU table, taxonomy, and sampledata datasets
OTU <- otu_table(as.matrix(otu_table), taxa_are_rows = T)
TAX <- tax_table(as.matrix(taxonomy))
sampledata <- sample_data(data.frame(Bog = substr(colnames(otu_table), start = 1, stop = 2), Layer = substr(colnames(otu_table), start = 3, stop = 3), Year = substr(colnames(otu_table), start = 9, stop = 10), row.names = colnames(otu_table), stringsAsfactors = F))
alldata <- phyloseq(OTU, TAX, sampledata, bogtree)
# PCoA of North Sparkling
NSH <- prune_samples(sampledata$Bog == "NS" & sampledata$Layer == "H", alldata)
sample_names(NSH)[17] <- "NSH01JUL08"
NSH_year <- factor(substr(sample_names(NSH), start = 9, stop = 10), levels = years)
x <- UniFrac(NSH, weighted = T, normalize = T)
pcoa <- betadisper(x, NSH_year)
scores <- scores(pcoa)
NSHcentroids <- scores$centroids
NSHcentroids <- as.data.frame(NSHcentroids)
NSHcentroids$Year <- factor(years[2:4], level = years)
plot.pcoa <- data.frame(scores$sites, NSH_year)
colnames(plot.pcoa) <- c("PCoA1", "PCoA2", "Year")
axis1 <- round(pcoa$eig[1]/sum(pcoa$eig), digits = 2)
axis2 <- round(pcoa$eig[2]/sum(pcoa$eig), digits = 2)
png(file = paste(path2repo, "FigureS7_NSH_pcoa.png", sep = ""), width = 3, height = 3, units = "in", res = 144)
ggplot(data=plot.pcoa, aes(x = PCoA1, y = PCoA2, color = Year)) + geom_point() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.ticks = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 0.5, size = 10, colour = "black"), axis.title = element_text(size = 10, hjust = 0.5, vjust = 0.1), axis.text.y = element_text(colour = "black", size = 10), panel.border = element_rect(colour = "black", fill=NA, size=1), legend.position="none") + geom_point(data=NSHcentroids, aes(x = PCoA1, y = PCoA2, color = Year), size = 3, shape = 3, color = "black") + labs(title = "North Sparkling Bog", x = paste("PCoA1 (", axis1, ")", sep = ""), y = paste("PCoA2 (", axis2, ")")) + coord_cartesian(xlim = c(-0.2, 0.2), ylim = c(-0.2, 0.2)) + scale_color_manual(values = colors[2:4])
dev.off()
CBH <- prune_samples(sampledata$Bog == "CB" & sampledata$Layer == "H", alldata)
CBH_year <- factor(substr(sample_names(CBH), start = 9, stop = 10), levels = years)
x <- UniFrac(CBH, weighted = T, normalize = T)
pcoa <- betadisper(x, CBH_year)
scores <- scores(pcoa)
# Locate centroids
CBHcentroids <- scores$centroids
CBHcentroids <- as.data.frame(CBHcentroids)
CBHcentroids$Year <- factor(years[c(2, 4)], level = years)
plot.pcoa <- data.frame(scores$sites, CBH_year)
colnames(plot.pcoa) <- c("PCoA1", "PCoA2", "Year")
axis1 <- round(pcoa$eig[1]/sum(pcoa$eig), digits = 2)
axis2 <- round(pcoa$eig[2]/sum(pcoa$eig), digits = 2)
png(file = paste(path2repo, "FigureS7_CBH_pcoa.png", sep = ""), width = 3, height = 3, units = "in", res = 144)
ggplot(data=plot.pcoa, aes(x = PCoA1, y = PCoA2, color = Year)) + geom_point() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.ticks = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 0.5, size = 10, colour = "black"), axis.title = element_text(size = 10, hjust = 0.5, vjust = 0.1), axis.text.y = element_text(colour = "black", size = 10), panel.border = element_rect(colour = "black", fill=NA, size=1), legend.position="none") + geom_point(data=CBHcentroids, aes(x = PCoA1, y = PCoA2, color = Year), size = 3, shape = 3, color = "black") + labs(title = "Crystal Bog", x = paste("PCoA1 (", axis1, ")", sep = ""), y = paste("PCoA2 (", axis2, ")")) + coord_cartesian(xlim = c(-0.2, 0.2), ylim = c(-0.2, 0.2)) + scale_color_manual(values = colors[c(2, 4)])
dev.off()
NSH <- prune_samples(sampledata$Bog == "NS" & sampledata$Layer == "H", alldata)
sample_names(NSH)[17] <- "NSH01JUL08"
NSH_year <- factor(substr(sample_names(NSH), start = 9, stop = 10), levels = years)
x <- UniFrac(NSH, weighted = T, normalize = T)
pcoa <- betadisper(x, NSH_year)
scores <- scores(pcoa)
# Locate centroids
NSHcentroids <- scores$centroids
NSHcentroids <- as.data.frame(NSHcentroids)
NSHcentroids$Year <- factor(years[2:4], level = years)
plot.pcoa <- data.frame(scores$sites, NSH_year)
colnames(plot.pcoa) <- c("PCoA1", "PCoA2", "Year")
axis1 <- round(pcoa$eig[1]/sum(pcoa$eig), digits = 2)
axis2 <- round(pcoa$eig[2]/sum(pcoa$eig), digits = 2)
png(file = paste(path2repo, "FigureS7_NSH_pcoa.png", sep = ""), width = 3, height = 3, units = "in", res = 144)
ggplot(data=plot.pcoa, aes(x = PCoA1, y = PCoA2, color = Year)) + geom_point() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.ticks = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 0.5, size = 10, colour = "black"), axis.title = element_text(size = 10, hjust = 0.5, vjust = 0.1), axis.text.y = element_text(colour = "black", size = 10), panel.border = element_rect(colour = "black", fill=NA, size=1), legend.position="none") + geom_point(data=NSHcentroids, aes(x = PCoA1, y = PCoA2, color = Year), size = 3, shape = 3, color = "black") + labs(title = "North Sparkling Bog", x = paste("PCoA1 (", axis1, ")", sep = ""), y = paste("PCoA2 (", axis2, ")")) + coord_cartesian(xlim = c(-0.2, 0.2), ylim = c(-0.2, 0.2)) + scale_color_manual(values = colors[2:4])
dev.off()
CBH <- prune_samples(sampledata$Bog == "CB" & sampledata$Layer == "H", alldata)
CBH_year <- factor(substr(sample_names(CBH), start = 9, stop = 10), levels = years)
x <- UniFrac(CBH, weighted = T, normalize = T)
pcoa <- betadisper(x, CBH_year)
scores <- scores(pcoa)
# Locate centroids
CBHcentroids <- scores$centroids
CBHcentroids <- as.data.frame(CBHcentroids)
CBHcentroids$Year <- factor(years[c(2, 4)], level = years)
plot.pcoa <- data.frame(scores$sites, CBH_year)
colnames(plot.pcoa) <- c("PCoA1", "PCoA2", "Year")
axis1 <- round(pcoa$eig[1]/sum(pcoa$eig), digits = 2)
axis2 <- round(pcoa$eig[2]/sum(pcoa$eig), digits = 2)
png(file = paste(path2repo, "FigureS7_CBH_pcoa.png", sep = ""), width = 3, height = 3, units = "in", res = 144)
ggplot(data=plot.pcoa, aes(x = PCoA1, y = PCoA2, color = Year)) + geom_point() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.ticks = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 0.5, size = 10, colour = "black"), axis.title = element_text(size = 10, hjust = 0.5, vjust = 0.1), axis.text.y = element_text(colour = "black", size = 10), panel.border = element_rect(colour = "black", fill=NA, size=1), legend.position="none") + geom_point(data=CBHcentroids, aes(x = PCoA1, y = PCoA2, color = Year), size = 3, shape = 3, color = "black") + labs(title = "Crystal Bog", x = paste("PCoA1 (", axis1, ")", sep = ""), y = paste("PCoA2 (", axis2, ")")) + coord_cartesian(xlim = c(-0.2, 0.2), ylim = c(-0.2, 0.2)) + scale_color_manual(values = colors[c(2, 4)])
dev.off()
MAHtable <- bog_subset("MAH", otu_table)
MAHtable05 <- year_subset("05", MAHtable)
MAHtable07 <- year_subset("07", MAHtable)
MAHtable08 <- year_subset("08", MAHtable)
MAHtable09 <- year_subset("09", MAHtable)
otu_table2 <- otu_table
otu_table2$MAH01REP05 <- rowSums(MAHtable05)/dim(MAHtable05)[2]
otu_table2$MAH01REP07 <- rowSums(MAHtable07)/dim(MAHtable07)[2]
otu_table2$MAH01REP08 <- rowSums(MAHtable08)/dim(MAHtable08)[2]
otu_table2$MAH01REP09 <- rowSums(MAHtable09)/dim(MAHtable09)[2]
OTU2 <- otu_table(as.matrix(otu_table2), taxa_are_rows = T)
sampledata2 <- sample_data(data.frame(Bog = substr(colnames(otu_table2), start = 1, stop = 2), Layer = substr(colnames(otu_table2), start = 3, stop = 3), Year = substr(colnames(otu_table2), start = 9, stop = 10), row.names = colnames(otu_table2), stringsAsfactors = F))
alldata_reps <- phyloseq(OTU2, TAX, sampledata2, bogtree)
MAH2 <- prune_samples(sampledata2$Bog == "MA" & sampledata2$Layer == "H", alldata_reps)
MAH2_year <- factor(substr(sample_names(MAH2), start = 9, stop = 10), levels = years)
MAH2_type <- substr(sample_names(MAH2), start = 6, stop = 8) == "REP"
x <- UniFrac(MAH2, weighted = T, normalize = T)
pcoa <- betadisper(x, MAH2_year)
scores <- scores(pcoa)
# Locate centroids
MAH2centroids <- scores$centroids
MAH2centroids <- as.data.frame(MAH2centroids)
MAH2centroids$Year <- factor(years, level = years)
plot.pcoa <- data.frame(scores$sites, MAH2_year, as.factor(MAH2_type))
colnames(plot.pcoa) <- c("PCoA1", "PCoA2", "Year", "Sample")
png(file = paste(path2repo, "FigureS8_MAHreps_pcoa.png", sep = ""), width = 3, height = 3, units = "in", res = 144)
ggplot(data=plot.pcoa, aes(x = PCoA1, y = PCoA2, color = Year, shape = Sample, size = Sample)) + geom_point() + scale_shape_manual(values = c(16, 15)) + scale_size_manual(values = c(2, 3)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.ticks = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 0.5, size = 12, colour = "black"), axis.title = element_text(size = 10, hjust = 0.5, vjust = 0.1), axis.text.y = element_text(colour = "black", size = 10), panel.border = element_rect(colour = "black", fill=NA, size=1), legend.position="none") + geom_point(data=MAH2centroids, aes(x = PCoA1, y = PCoA2, color = Year), size = 3, shape = 3, color = "black") + labs(title = "Mary Lake") + scale_color_manual(values = colors)
dev.off()
png(file = paste(path2repo, "FigureS8_MAHreps_pcoa.png", sep = ""), width = 4, height = 4, units = "in", res = 144)
ggplot(data=plot.pcoa, aes(x = PCoA1, y = PCoA2, color = Year, shape = Sample, size = Sample)) + geom_point() + scale_shape_manual(values = c(16, 15)) + scale_size_manual(values = c(2, 3)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))  + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.ticks = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 0.5, size = 12, colour = "black"), axis.title = element_text(size = 10, hjust = 0.5, vjust = 0.1), axis.text.y = element_text(colour = "black", size = 10), panel.border = element_rect(colour = "black", fill=NA, size=1), legend.position="none") + geom_point(data=MAH2centroids, aes(x = PCoA1, y = PCoA2, color = Year), size = 3, shape = 3, color = "black") + labs(title = "Mary Lake") + scale_color_manual(values = colors)
dev.off()
lakes <- c("CB", "FB", "WS", "NS", "TB", "SS", "HK", "MA")
# Split epilimnion and hypolimnion into separate tables
epilimnia <- bog_subset("..E", otu_table)
hypolimnia <- bog_subset("..H", otu_table)
# Calculate observed richness
epi.obs <- apply(epilimnia, 2, obs_richness)
hypo.obs <- apply(hypolimnia, 2, obs_richness)
# Extract sampling location from sample names
epi.lakes <- substr(names(epi.obs), start = 1, stop = 2)
hypo.lakes <- substr(names(hypo.obs), start = 1, stop = 2)
# Make dataframe for plotting
epi.data <- data.frame(epi.lakes, epi.obs)
hypo.data <- data.frame(hypo.lakes, hypo.obs)
# Order factors
epi.data$epi.lakes <- ordered(epi.data$epi.lakes, levels = lakes)
hypo.data$hypo.lakes <- ordered(hypo.data$hypo.lakes, levels = lakes)
head(epi.data)
library(plyr)
epi2 <- ddply(epi.data, .(epi.lakes), summarize, mean=mean(epi.obs))
epi2
hypo2 <- ddply(hypo.data, .(hypo.lakes), summarize, mean=mean(hypo.obs))
hypo2
plot(epi2$mean, hypo2$mean)
cor(epi2$mean, hypo2$mean)
# Input your path to the North_Temperate_Lakes-Microbial_Observatory/Figures folder in the GitHub repo, or whereever you would like the ** # Figures to be saved
path2repo <- "C:/Users/Alex/Desktop/North_Temperate_Lakes-Microbial_Observatory/Figures/"
# Load packages
library(OTUtable)       # Contains data and functions for analysis of NTL-MO OTU table
library(vegan)          # Used for Bray-Curtis
library(ggplot2)        # Used for plotting
library(reshape2)       # Used to format metadata
library(ggdendro)       # Used to plot hierarchical clustering trees
library(exactRankTests) # Used to test evenness across lakes
library(phyloseq)     # Used to calculate UniFrac distances
library(ape)          # Used to read tree in to environment for UniFrac
# Load data from OTUtable
data(otu_table)
data(taxonomy)
data(metadata)
#Load fasta file
seqs <- read.dna("C:/Users/Alex/Desktop/North_Temperate_Lakes-Microbial_Observatory/Data/16S_data/bog_repseqs_07Jul15.fasta", format = "fasta")
# Generate tables at the clade and phylum level
clade_table <- combine_otus("Clade", otu_table, taxonomy)
phylum_table <- combine_otus("Phylum", otu_table, taxonomy)
lakes <- c("CB", "FB", "WS", "NS", "TB", "SS", "HK", "MA")
# Split epilimnion and hypolimnion into separate tables
epilimnia <- bog_subset("..E", otu_table)
hypolimnia <- bog_subset("..H", otu_table)
# Calculate observed richness
epi.evenness <- apply(epilimnia, 2, pielou)
hypo.evenness <- apply(hypolimnia, 2, pielou)
# Extract sampling location from sample names
epi.lakes <- substr(names(epi.evenness), start = 1, stop = 2)
hypo.lakes <- substr(names(hypo.evenness), start = 1, stop = 2)
#Make dataframe for plotting
epi.data <- data.frame(epi.lakes, epi.evenness)
hypo.data <- data.frame(hypo.lakes, hypo.evenness)
epi.data$epi.lakes <- ordered(epi.data$epi.lakes, levels = lakes)
hypo.data$hypo.lakes <- ordered(hypo.data$hypo.lakes, levels = lakes)
ggplot(data = epi.data, aes(y = epi.evenness, x = epi.lakes, fill = epi.lakes)) + geom_boxplot() + labs(y = "Observed Evenness", x = NULL, title = "Epilimnion") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust = 2), axis.text.y = element_text(colour = "black", size = 14), legend.position = "none") + scale_fill_brewer(palette = "Set3")
ggplot(data = epi.data, aes(y = epi.evenness, x = epi.lakes, fill = epi.lakes)) + geom_boxplot() + labs(y = "Observed Evenness", x = NULL, title = "Epilimnion") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust = 2), axis.text.y = element_text(colour = "black", size = 14), panel.border = element_rect(color = "black"), legend.position = "none") + scale_fill_brewer(palette = "Set3")
ggplot(data = epi.data, aes(y = epi.evenness, x = epi.lakes, fill = epi.lakes)) + geom_boxplot() + labs(y = "Observed Evenness", x = NULL, title = "Epilimnion") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust = 2), axis.text.y = element_text(colour = "black", size = 14), panel.border = element_line(color = "black"), legend.position = "none") + scale_fill_brewer(palette = "Set3")
ggplot(data = epi.data, aes(y = epi.evenness, x = epi.lakes, fill = epi.lakes)) + geom_boxplot() + labs(y = "Observed Evenness", x = NULL, title = "Epilimnion") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust = 2), axis.text.y = element_text(colour = "black", size = 14), legend.position = "none") + scale_fill_brewer(palette = "Set3")
ggplot(data = epi.data, aes(y = epi.evenness, x = epi.lakes, fill = epi.lakes)) + geom_boxplot() + labs(y = "Observed Evenness", x = NULL, title = "Epilimnion") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust = 2), axis.text.y = element_text(colour = "black", size = 14), legend.position = "none") + scale_fill_brewer(palette = "Set3")
ggplot(data = epi.data, aes(y = epi.evenness, x = epi.lakes, fill = epi.lakes)) + geom_boxplot() + labs(y = "Observed Evenness", x = NULL, title = "Epilimnion") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust = 2), axis.text.y = element_text(colour = "black", size = 14), legend.position = "none") + scale_fill_brewer(palette = "Set3")
ggplot(data = epi.data, aes(y = epi.evenness, x = epi.lakes, fill = epi.lakes)) + geom_boxplot() + labs(y = "Observed Evenness", x = NULL, title = "Epilimnion") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line.x = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust = 2), axis.text.y = element_text(colour = "black", size = 14), legend.position = "none") + scale_fill_brewer(palette = "Set3")
ggplot(data = epi.data, aes(y = epi.evenness, x = epi.lakes, fill = epi.lakes)) + geom_boxplot() + labs(y = "Observed Evenness", x = NULL, title = "Epilimnion") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line.x = element_line(colour = "black"), axis.line.y = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust = 2), axis.text.y = element_text(colour = "black", size = 14), legend.position = "none") + scale_fill_brewer(palette = "Set3")
# Input your path to the North_Temperate_Lakes-Microbial_Observatory/Figures folder in the GitHub repo, or whereever you would like the ** # Figures to be saved
path2repo <- "C:/Users/Alex/Desktop/North_Temperate_Lakes-Microbial_Observatory/Figures/"
# Load packages
library(OTUtable)       # Contains data and functions for analysis of NTL-MO OTU table
library(vegan)          # Used for Bray-Curtis
library(ggplot2)        # Used for plotting
library(reshape2)       # Used to format metadata
library(ggdendro)       # Used to plot hierarchical clustering trees
library(exactRankTests) # Used to test evenness across lakes
library(phyloseq)     # Used to calculate UniFrac distances
library(ape)          # Used to read tree in to environment for UniFrac
# Load data from OTUtable
data(otu_table)
data(taxonomy)
data(metadata)
#Load fasta file
seqs <- read.dna("C:/Users/Alex/Desktop/North_Temperate_Lakes-Microbial_Observatory/Data/16S_data/bog_repseqs_07Jul15.fasta", format = "fasta")
# Generate tables at the clade and phylum level
clade_table <- combine_otus("Clade", otu_table, taxonomy)
phylum_table <- combine_otus("Phylum", otu_table, taxonomy)
# List lake categories
lakes <- c("CB", "FB", "WS", "NS", "TB", "SS", "HK", "MA")
# Split epilimnion and hypolimnion into separate tables
epilimnia <- bog_subset("..E", otu_table)
hypolimnia <- bog_subset("..H", otu_table)
# Calculate observed richness
epi.evenness <- apply(epilimnia, 2, pielou)
hypo.evenness <- apply(hypolimnia, 2, pielou)
# Extract sampling location from sample names
epi.lakes <- substr(names(epi.evenness), start = 1, stop = 2)
hypo.lakes <- substr(names(hypo.evenness), start = 1, stop = 2)
#Make dataframe for plotting
epi.data <- data.frame(epi.lakes, epi.evenness)
hypo.data <- data.frame(hypo.lakes, hypo.evenness)
epi.data$epi.lakes <- ordered(epi.data$epi.lakes, levels = lakes)
hypo.data$hypo.lakes <- ordered(hypo.data$hypo.lakes, levels = lakes)
png(file = paste(path2repo, "FigureS1_epi_boxplot.png", sep = ""), width = 4, height = 3, units = "in", res = 144)
ggplot(data = epi.data, aes(y = epi.evenness, x = epi.lakes, fill = epi.lakes)) + geom_boxplot() + labs(y = "Observed Evenness", x = NULL, title = "Epilimnion") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line.x = element_line(colour = "black"), axis.line.y = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust = 2), axis.text.y = element_text(colour = "black", size = 14), legend.position = "none") + scale_fill_brewer(palette = "Set3")
dev.off()
path2repo
getwd()
png(file = paste(path2repo, "FigureS1_epi_boxplot.png", sep = ""), width = 4, height = 3, units = "in", res = 144)
ggplot(data = epi.data, aes(y = epi.evenness, x = epi.lakes, fill = epi.lakes)) + geom_boxplot() + labs(y = "Observed Evenness", x = NULL, title = "Epilimnion") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line.x = element_line(colour = "black"), axis.line.y = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust = 2), axis.text.y = element_text(colour = "black", size = 14), legend.position = "none") + scale_fill_brewer(palette = "Set3")
dev.off()
paste(path2repo, "FigureS1_epi_boxplot.png", sep = "")
ggplot(data = epi.data, aes(y = epi.evenness, x = epi.lakes, fill = epi.lakes)) + geom_boxplot() + labs(y = "Observed Evenness", x = NULL, title = "Epilimnion") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line.x = element_line(colour = "black"), axis.line.y = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust = 2), axis.text.y = element_text(colour = "black", size = 14), legend.position = "none") + scale_fill_brewer(palette = "Set3")
png(file = paste(path2repo, "FigureS1_epi_boxplot.png", sep = ""), width = 4, height = 3, units = "in", res = 144)
ggplot(data = epi.data, aes(y = epi.evenness, x = epi.lakes, fill = epi.lakes)) + geom_boxplot() + labs(y = "Observed Evenness", x = NULL, title = "Epilimnion") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line.x = element_line(colour = "black"), axis.line.y = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust = 2), axis.text.y = element_text(colour = "black", size = 14), legend.position = "none") + scale_fill_brewer(palette = "Set3")
dev.off()
# Split epilimnion and hypolimnion into separate tables
dev.off()
png(file = paste(path2repo, "FigureS1_epi_boxplot.png", sep = ""), width = 4, height = 3, units = "in", res = 144)
ggplot(data = epi.data, aes(y = epi.evenness, x = epi.lakes, fill = epi.lakes)) + geom_boxplot() + labs(y = "Observed Evenness", x = NULL, title = "Epilimnion") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line.x = element_line(colour = "black"), axis.line.y = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust = 2), axis.text.y = element_text(colour = "black", size = 14), legend.position = "none") + scale_fill_brewer(palette = "Set3")
dev.off()
dev.off()
png(file = paste(path2repo, "FigureS1_epi_boxplot.png", sep = ""), width = 4, height = 3, units = "in", res = 144)
ggplot(data = epi.data, aes(y = epi.evenness, x = epi.lakes, fill = epi.lakes)) + geom_boxplot() + labs(y = "Observed Evenness", x = NULL, title = "Epilimnion") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line.x = element_line(colour = "black"), axis.line.y = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust = 2), axis.text.y = element_text(colour = "black", size = 14), legend.position = "none") + scale_fill_brewer(palette = "Set3")
dev.off()
