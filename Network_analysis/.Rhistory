layer <- c("CBE", "FBE", "WSE", "NSE", "TBE", "SSE", "HKE", "MAE", "CBH", "FBH", "WSH", "NSH", "TBH",  "SSH", "HKH", "MAH")
#Set up a dataframe with the totals of each phylum for each sampling site
layer.phyla <- rep(NA, dim(phylum_table)[1])
for(i in 1:length(layer)){
dataset <- bog_subset(layer[i], phylum_table)
layer.phyla <- cbind(layer.phyla, rowSums(dataset))
}
layer.phyla <- layer.phyla[,2:dim(layer.phyla)[2]]
colnames(layer.phyla) <- layer
#Combine low abundance phyla into a single category called "other"
abun <- layer.phyla[which(rowSums(layer.phyla) >= 10000),]
other <- layer.phyla[which(rowSums(layer.phyla) < 10000),]
new.layer <- rbind(abun, colSums(other))
#Shorten up those names again and remove extraneous rownames
get.names <- strsplit(rownames(new.layer), "p__")
phyla.names <- c()
for(i in 1:length(get.names)){
phyla.names[i] <- get.names[[i]][2]
}
phyla.names[7] <- "unclassifed"
phyla.names[12] <- "other"
phyla.names <- factor(phyla.names, levels=rev(phyla.names))
rownames(new.layer) <- NULL
#Convert data into a long format dataframe for use in ggplot
phyla_by_bog <- data.frame(phyla.names, new.layer)
phyla_by_bog2 <- melt(phyla_by_bog)
clade_table07 <- year_subset("07", clade_table)
all.hypo <- bog_subset("..H", clade_table07)
TBH <- bog_subset("TBH", all.hypo)
MAH <- bog_subset("MAH", all.hypo)
#Label which lake each sample comes from
groups <- c(rep("Trout", dim(TBH)[2]), rep("Mary", dim(MAH)[2]))
input <- cbind(TBH, MAH)
dates <- extract_date(colnames(input))
#Remove January samples
dates <- dates[c(1:32, 35:130)]
input <- input[,c(1:32, 35:130)]
groups <- groups[c(1:32, 35:130)]
#Run PCoA using Bray-Curtis Similarity as distance metric
distance <- vegdist(t(input), method="bray")
pcoa <- betadisper(distance, groups)
#Extract scores for plotting
scores <- scores(pcoa)
#Make dataframe for plotting
plot.pcoa <- data.frame(groups, as.numeric(dates - dates[78]), scores)
colnames(plot.pcoa) <- c("Lake", "Date", "PCoA1", "PCoA2")
pdf(file = "C:/Users/amlinz16/Dropbox/Deblurred Bog Tags/Bog_paper_figures_and_scripts/Figures Nov15/TBH_v_MAH_PCoA.pdf", width = 3.3125*2, height = 4.625, useDingbats=FALSE)
pdf(file = "C:/Users/amlinz16/Dropbox/Deblurred Bog Tags/Bog_paper_figures_and_scripts/Figures Nov15/TBH_v_MAH_PCoA.pdf", width = 3.3125*2, height = 4.625, useDingbats=FALSE)
pdf(file = "C:/Users/amlinz16/Dropbox/Deblurred Bog Tags/Bog_paper_figures_and_scripts/Figures Nov15/TBH_v_MAH_PCoA.pdf", width = 3.3125*2, height = 4.625, useDingbats=FALSE)
pdf(file = "C:/Users/Alex/Dropbox/Deblurred Bog Tags/Bog_paper_figures_and_scripts/Figures Nov15/TBH_v_MAH_PCoA.pdf", width = 3.3125*2, height = 4.625, useDingbats=FALSE)
ggplot(data=plot.pcoa, aes(x = PCoA1, y = PCoA2, shape = Lake, color = Date)) + geom_point(size=3) + scale_shape_discrete(solid=T) + scale_colour_gradient2(low = "white", mid = "yellow", high = "red") + geom_point(size=4) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 12, colour = "black"), axis.title = element_text(size = 15, vjust=0.7), axis.text.y = element_text(colour="black", size=12))
dev.off()
named_otu_table <- otu_table
fullnames <- c()
for(i in 1:dim(taxonomy)[1]){
fullnames[i] <- paste(taxonomy[i,], collapse = ";")
}
fullnames <- make.unique(fullnames)
rownames(named_otu_table) <- fullnames
#Re-run clade and phylum tables so that names are no longer shortened.
clade_table <- combine_otus("Clade", otu_table, taxonomy)
phylum_table <- combine_otus("Phylum", otu_table, taxonomy)
#Combine the tables at all taxonomic levels into one giant table
full_table <- rbind(named_otu_table, tribe_table, clade_table, lineage_table, order_table, class_table, phylum_table)
#Remove unclassified groups - I'm not interested in these for this analysis
classified <- grep("unclassified", rownames(full_table))
classified1 <- grep("__$", rownames(full_table))
parsed_table <- full_table[-c(classified, classified1),]
#Identify mixing dates
metadata$Sample_Name <- as.character(metadata$Sample_Name)
metalakes <- substr(metadata$Sample_Name, start=1, stop=3)
metayears <- substr(metadata$Sample_Name, start=9, stop=10)
metaTBH <- metadata[which(metalakes == "TBH"), c(1,2,4)]
metaTBH <- dcast(metaTBH, Sample_Name~Depth, fun.aggregate=mean)
TBHmixes <- metaTBH$Sample_Name[which(metaTBH$"0.5" - metaTBH$"7" < 1)]
metaNSH <- metadata[which(metalakes == "NSH"), c(1,2,4)]
metaNSH <- dcast(metaNSH, Sample_Name~Depth, fun.aggregate=mean)
NSHmixes <- metaNSH$Sample_Name[which(metaNSH$"0.5" - metaNSH$"4" < 1)]
metaSSH <- metadata[which(metalakes == "SSH"), c(1,2,4)]
metaSSH <- dcast(metaSSH, Sample_Name~Depth, fun.aggregate=mean)
SSHmixes <- metaSSH$Sample_Name[which(metaSSH$"0.5" - metaSSH$"8" < 1)]
metaCBH <- metadata[which(metalakes == "CBH"), c(1,2,4)]
metaCBH <- dcast(metaCBH, Sample_Name~Depth, fun.aggregate=mean)
CBHmixes <- metaCBH$Sample_Name[which(metaCBH$"0.5" - metaCBH$"2" < 1)]
metaWSH <- metadata[which(metalakes == "WSH"), c(1,2,4)]
metaWSH <- dcast(metaWSH, Sample_Name~Depth, fun.aggregate=mean)
WSHmixes <- metaWSH$Sample_Name[which(metaWSH$"0.5" - metaWSH$"4" < 1)]
metaFBH <- metadata[which(metalakes == "FBH"), c(1,2,4)]
metaFBH <- dcast(metaFBH, Sample_Name~Depth, fun.aggregate=mean)
FBHmixes <- metaFBH$Sample_Name[which(metaFBH$"0.5" - metaFBH$"1.5" < 1)]
mixes <- c(CBHmixes, FBHmixes, WSHmixes, TBHmixes, NSHmixes, SSHmixes)
input_table <- bog_subset("NSE|NSH|SS.|TB.|HK.|MA.", parsed_table)
mixing_dates <- match(mixes, substr(colnames(input_table), start=1, stop=10))
remove <- mixing_dates[which(is.na(mixing_dates) == F)]
input_table <- input_table[,-remove]
classified <- grep("unclassified", rownames(full_table))
classified1 <- grep("__$", rownames(full_table))
parsed_table <- full_table[-c(classified, classified1),]
full_table <- rbind(named_otu_table, tribe_table, clade_table, lineage_table, order_table, class_table, phylum_table)
tribe_table <- combine_otus("Tribe", otu_table, taxonomy)
clade_table <- combine_otus("Clade", otu_table, taxonomy)
lineage_table <- combine_otus("Lineage", otu_table, taxonomy)
order_table <- combine_otus("Order", otu_table, taxonomy)
class_table <- combine_otus("Class", otu_table, taxonomy)
phylum_table <- combine_otus("Phylum", otu_table, taxonomy)
clade_table07 <- year_subset("07", clade_table)
named_otu_table <- otu_table
fullnames <- c()
for(i in 1:dim(taxonomy)[1]){
fullnames[i] <- paste(taxonomy[i,], collapse = ";")
}
fullnames <- make.unique(fullnames)
rownames(named_otu_table) <- fullnames
full_table <- rbind(named_otu_table, tribe_table, clade_table, lineage_table, order_table, class_table, phylum_table)
classified <- grep("unclassified", rownames(full_table))
classified1 <- grep("__$", rownames(full_table))
parsed_table <- full_table[-c(classified, classified1),]
metadata$Sample_Name <- as.character(metadata$Sample_Name)
metalakes <- substr(metadata$Sample_Name, start=1, stop=3)
metayears <- substr(metadata$Sample_Name, start=9, stop=10)
metaTBH <- metadata[which(metalakes == "TBH"), c(1,2,4)]
metaTBH <- dcast(metaTBH, Sample_Name~Depth, fun.aggregate=mean)
TBHmixes <- metaTBH$Sample_Name[which(metaTBH$"0.5" - metaTBH$"7" < 1)]
metaNSH <- metadata[which(metalakes == "NSH"), c(1,2,4)]
metaNSH <- dcast(metaNSH, Sample_Name~Depth, fun.aggregate=mean)
NSHmixes <- metaNSH$Sample_Name[which(metaNSH$"0.5" - metaNSH$"4" < 1)]
metaSSH <- metadata[which(metalakes == "SSH"), c(1,2,4)]
metaSSH <- dcast(metaSSH, Sample_Name~Depth, fun.aggregate=mean)
SSHmixes <- metaSSH$Sample_Name[which(metaSSH$"0.5" - metaSSH$"8" < 1)]
metaCBH <- metadata[which(metalakes == "CBH"), c(1,2,4)]
metaCBH <- dcast(metaCBH, Sample_Name~Depth, fun.aggregate=mean)
CBHmixes <- metaCBH$Sample_Name[which(metaCBH$"0.5" - metaCBH$"2" < 1)]
metaWSH <- metadata[which(metalakes == "WSH"), c(1,2,4)]
metaWSH <- dcast(metaWSH, Sample_Name~Depth, fun.aggregate=mean)
WSHmixes <- metaWSH$Sample_Name[which(metaWSH$"0.5" - metaWSH$"4" < 1)]
metaFBH <- metadata[which(metalakes == "FBH"), c(1,2,4)]
metaFBH <- dcast(metaFBH, Sample_Name~Depth, fun.aggregate=mean)
FBHmixes <- metaFBH$Sample_Name[which(metaFBH$"0.5" - metaFBH$"1.5" < 1)]
mixes <- c(CBHmixes, FBHmixes, WSHmixes, TBHmixes, NSHmixes, SSHmixes)
data(metadata)
data(otu_table)
input_table <- bog_subset("NSE|NSH|SS.|TB.|HK.|MA.", parsed_table)
mixing_dates <- match(mixes, substr(colnames(input_table), start=1, stop=10))
remove <- mixing_dates[which(is.na(mixing_dates) == F)]
input_table <- input_table[,-remove]
#Keep only groups with abundances in the top quantile (75th or higher)
threshold <- quantile(rowSums(input_table))[4]
input_table <- input_table[which(rowSums(input_table) >= threshold),]
#Format table for input into indicspecies analysis
input_table <- t(input_table)
input_table <- as.data.frame(input_table)
sampleids <- rownames(input_table)
layer <- substr(sampleids, start=3, stop=3)
layerid <- c("E", "H")
epi_v_hypo <- c()
for(i in 1:length(layerid)){
epi_v_hypo[which(layer == layerid[i])] <- i
}
#Run multipatt(), specifing the the index of choice is group-normalized correlation
clade_by_layer <- multipatt(x = input_table, cluster = epi_v_hypo, func = "r.g", control = how(nperm = 9999))
library(indicspecies)
sampleids <- rownames(input_table)
layer <- substr(sampleids, start=3, stop=3)
layerid <- c("E", "H")
epi_v_hypo <- c()
for(i in 1:length(layerid)){
epi_v_hypo[which(layer == layerid[i])] <- i
}
#Run multipatt(), specifing the the index of choice is group-normalized correlation
clade_by_layer <- multipatt(x = input_table, cluster = epi_v_hypo, func = "r.g", control = how(nperm = 9999))
results <- clade_by_layer$sign
hypo <- results[which(results$index == 2),]
hypo <- hypo[order(hypo$stat, decreasing=T),]
hypo.indicators <- hypo[c(1, 3, 4, 5, 6, 7, 10, 16, 17, 21), ]
hypo_table <- bog_subset("..H", t(input_table))
hits <- match(rownames(hypo.indicators), rownames(hypo_table))
hypo.indicators$abundance <- rowSums(hypo_table[hits,])/sum(rowSums(hypo_table)) * 100
rownames(hypo.indicators) <- substr(rownames(hypo.indicators), start=13, stop = 150)
hypo.indicators$groups <- factor(rownames(hypo.indicators), levels=rownames(hypo.indicators))
ggplot(data=hypo.indicators, aes(x=groups, y=abundance, fill=stat)) + geom_bar(stat="identity", colour="black") + coord_flip() + labs(x = NULL, y = "% of Community") + theme(axis.text.x = element_text(angle = 90, size = 6, colour = "black"), axis.title = element_text(size = 10, vjust=-0.5), axis.text.y = element_text(colour="black", size = 6), legend.text = element_text(size=6)) + scale_y_continuous(expand = c(0,0)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + scale_fill_gradient(low= "lightgrey", high= "black")
hypo.indicators
hypo.indicators
hypo <- hypo[order(hypo$stat, decreasing=T),]
hypo[1:40]
hypo[1:40,]
hypo.indicators <- hypo[c(1, 3, 4, 5, 6, 7, 10, 17, 21, 22), ]
hypo_table <- bog_subset("..H", t(input_table))
hits <- match(rownames(hypo.indicators), rownames(hypo_table))
hypo.indicators$abundance <- rowSums(hypo_table[hits,])/sum(rowSums(hypo_table)) * 100
rownames(hypo.indicators) <- substr(rownames(hypo.indicators), start=13, stop = 150)
hypo.indicators$groups <- factor(rownames(hypo.indicators), levels=rownames(hypo.indicators))
ggplot(data=hypo.indicators, aes(x=groups, y=abundance, fill=stat)) + geom_bar(stat="identity", colour="black") + coord_flip() + labs(x = NULL, y = "% of Community") + theme(axis.text.x = element_text(angle = 90, size = 6, colour = "black"), axis.title = element_text(size = 10, vjust=-0.5), axis.text.y = element_text(colour="black", size = 6), legend.text = element_text(size=6)) + scale_y_continuous(expand = c(0,0)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + scale_fill_gradient(low= "lightgrey", high= "black")
pdf(file = "C:/Users/Alex/Dropbox/Deblurred Bog Tags/Bog_paper_figures_and_scripts/Figures Nov15/Hypo_indicators.pdf", width = 3.3125*2, height = 4.625/2)
ggplot(data=hypo.indicators, aes(x=groups, y=abundance, fill=stat)) + geom_bar(stat="identity", colour="black") + coord_flip() + labs(x = NULL, y = "% of Community") + theme(axis.text.x = element_text(angle = 90, size = 6, colour = "black"), axis.title = element_text(size = 10, vjust=-0.5), axis.text.y = element_text(colour="black", size = 6), legend.text = element_text(size=6)) + scale_y_continuous(expand = c(0,0)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + scale_fill_gradient(low= "lightgrey", high= "black")
dev.off()
library(OTUtable)
library(indicspecies)
data(otu_table)
data(taxonomy)
tribe_table <- combine_otus("Tribe", otu_table, taxonomy)
clade_table <- combine_otus("Clade", otu_table, taxonomy)
lineage_table <- combine_otus("Lineage", otu_table, taxonomy)
order_table <- combine_otus("Order", otu_table, taxonomy)
class_table <- combine_otus("Class", otu_table, taxonomy)
phylum_table <- combine_otus("Phylum", otu_table, taxonomy)
full_table <- rbind(otu_table, tribe_table, clade_table, lineage_table, order_table, class_table, phylum_table)
classified <- grep("unclassified", rownames(full_table))
classified1 <- grep("__$", rownames(full_table))
input_table <- full_table[-c(classified, classified1),]
lakeid <- c("CB", "FB", "WS", "NS", "TB", "SS", "HK","MA")
lakes <- substr(rownames(input_table), start=1, stop=2)
mixing_groups <- c()
mixing_groups[which(lakes == "CB" | lakes == "FB" | lakes == "WS")] <- 1
mixing_groups[which(lakes == "TB"| lakes == "NS"| lakes == "SS")] <- 2
mixing_groups[which(lakes == "MA" | lakes == "HK")] <- 3
clades_by_mixing <- multipatt(x = input_table, cluster = mixing_groups, func = "r.g", control = how(nperm = 9999))
mixing_groups
lakes
threshold <- quantile(rowSums(input_table))[4]
input_table <- input_table[which(rowSums(input_table) >= threshold),]
input_table <- t(input_table)
input_table <- as.data.frame(input_table)
lakes <- substr(rownames(input_table), start=1, stop=2)
mixing_groups <- c()
mixing_groups[which(lakes == "CB" | lakes == "FB" | lakes == "WS")] <- 1
mixing_groups[which(lakes == "TB"| lakes == "NS"| lakes == "SS")] <- 2
mixing_groups[which(lakes == "MA" | lakes == "HK")] <- 3
clades_by_mixing <- multipatt(x = input_table, cluster = mixing_groups, func = "r.g", control = how(nperm = 9999))
write.csv(clades_by_mixing$sign, file = "C:\Users\Alex\Desktop\North_Temperate_Lakes-Microbial_Observatory\Data\indicators_by_mixing.csv")
write.csv(clades_by_mixing$sign, file = "C:/Users/Alex/Desktop/North_Temperate_Lakes-Microbial_Observatory/Data/indicators_by_mixing.csv")
named_otu_table <- otu_table
fullnames <- c()
for(i in 1:dim(taxonomy)[1]){
fullnames[i] <- paste(taxonomy[i,], collapse = ";")
}
fullnames <- make.unique(fullnames)
rownames(named_otu_table) <- fullnames
full_table <- rbind(named_otu_table, tribe_table, clade_table, lineage_table, order_table, class_table, phylum_table)
classified <- grep("unclassified", rownames(full_table))
classified1 <- grep("__$", rownames(full_table))
input_table <- full_table[-c(classified, classified1),]
threshold <- quantile(rowSums(input_table))[4]
input_table <- input_table[which(rowSums(input_table) >= threshold),]
input_table <- t(input_table)
input_table <- as.data.frame(input_table)
lakeid <- c("CB", "FB", "WS", "NS", "TB", "SS", "HK","MA")
lakes <- substr(rownames(input_table), start=1, stop=2)
mixing_groups <- c()
mixing_groups[which(lakes == "CB" | lakes == "FB" | lakes == "WS")] <- 1
mixing_groups[which(lakes == "TB"| lakes == "NS"| lakes == "SS")] <- 2
mixing_groups[which(lakes == "MA" | lakes == "HK")] <- 3
clades_by_mixing <- multipatt(x = input_table, cluster = mixing_groups, func = "r.g", control = how(nperm = 9999))
write.csv(clades_by_mixing$sign, file = "C:/Users/Alex/Desktop/North_Temperate_Lakes-Microbial_Observatory/Data/indicators_by_mixing.csv")
dimictic <- c("NSH", "TBH", "SSH")
years <- c("05", "07", "08", "09")
library(reshape2)
library(OTUtable)
library(vegan)
data(otu_table)
data(taxonomy)
data(metadata)
clade_table <- combine_otus("Clade", otu_table, taxonomy)
metalakes <- substr(metadata$Sample_Name, start=1, stop=3)
metayears <- substr(metadata$Sample_Name, start=9, stop=10)
mary <- bog_subset("MAH", clade_table)
m <- matrix(NA, length(dimictic), length(years))
r <- matrix(NA, length(dimictic), length(years))
n <- matrix(NA, length(dimictic), length(years))
b <- matrix(NA, length(dimictic), length(years))
p <- matrix(NA, length(dimictic), length(years))
for(i in 1:length(dimictic)){
bog <- bog_subset(dimictic[i], clade_table)
for(j in 1:length(years)){
mary.year <- year_subset(years[j], mary)
data <- year_subset(years[j], bog)
metabog <- metadata[which(metalakes == dimictic[i] & metayears == years[j]), c(1,2,4)]
if(dim(data)[2] > 0){
metabog2 <- dcast(metabog, Sample_Name~Depth, fun.aggregate=mean)
mixes <- extract_date(metabog2$Sample_Name[which(metabog2$"0.5" - metabog2[,dim(metabog2)[2]-1] < 1)])
bogdates <- extract_date(colnames(data))
parsed.data <- data[,which(is.na(match(bogdates, mixes)) == T)]
parsed.dates <- extract_date(colnames(parsed.data))
parsed.data <- parsed.data[,order(parsed.dates)]
final.dates <- extract_date(colnames(parsed.data))
mean.bc <- c()
for(k in 1:dim(parsed.data)[2]){
bc.dis <- c()
for(l in 1:dim(mary.year)[2]){
test <- cbind(parsed.data[,k], mary.year[,l])
bc.dis[l] <- 1 - vegdist(t(test), method="bray")
}
mean.bc[k] <- mean(bc.dis)
}
time <- as.numeric(final.dates - final.dates[1])
r[i,j] <- cor(time, mean.bc)
n[i,j] <- length(mean.bc)
bestfit <- lm(mean.bc ~ time)
m[i,j] <- bestfit$coefficients[2]
b[i,j] <- bestfit$coefficients[1]
p[i,j] <- summary(bestfit)$coefficients[2,4]
}
}
}
colnames(m) <- years
colnames(r) <- years
colnames(p) <- years
colnames(b) <- years
rownames(m) <- dimictic
rownames(r) <- dimictic
rownames(p) <- dimictic
rownames(b) <- dimictic
m
r
p
b
library(OTUtable)
if(!require(vegan)){
install.packages("vegan")
library(vegan)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(reshape2)){
install.packages("reshape2")
library(reshape2)
}
if(!require(RColorBrewer)){
install.packages("RColorBrewer")
library(RColorBrewer)
}
#Load data from package OTUtable
data(otu_table)
data(taxonomy)
data(metadata)
#Make tables at the clade and phylum level
clade_table <- combine_otus("Clade", otu_table, taxonomy)
phylum_table <- combine_otus("Phylum", otu_table, taxonomy)
#Report only last classified taxonomy level of group names
clade_table <- reduce_names(clade_table)
phylum_table <- reduce_names(phylum_table)
#Repeat the same analysis as above on hypolimnion samples, but remove samples where the water column was mixed, as well as all polymictic lake samples.
#I use the metadata file to find samples from mixed days. I define a mixed day as less than 1 degree of temperature difference between 0.5 meters and the maximum sampling depth.
metadata$Sample_Name <- as.character(metadata$Sample_Name)
metalakes <- substr(metadata$Sample_Name, start=1, stop=3)
metayears <- substr(metadata$Sample_Name, start=9, stop=10)
#Identify mixed dates from dimictic lakes
metaTBH <- metadata[which(metalakes == "TBH" & metayears == "07"), c(1,2,4)]
metaTBH <- dcast(metaTBH, Sample_Name~Depth, fun.aggregate=mean)
TBHmixes <- metaTBH$Sample_Name[which(metaTBH$"0.5" - metaTBH$"7" < 1)]
metaNSH <- metadata[which(metalakes == "NSH" & metayears == "07"), c(1,2,4)]
metaNSH <- dcast(metaNSH, Sample_Name~Depth, fun.aggregate=mean)
NSHmixes <- metaNSH$Sample_Name[which(metaNSH$"0.5" - metaNSH$"4" < 1)]
metaSSH <- metadata[which(metalakes == "SSH" & metayears == "07"), c(1,2,4)]
metaSSH <- dcast(metaSSH, Sample_Name~Depth, fun.aggregate=mean)
SSHmixes <- metaSSH$Sample_Name[which(metaSSH$"0.5" - metaSSH$"8" < 1)]
mixes <- c(TBHmixes, NSHmixes, SSHmixes)
#Remove mixed dates from table of dimictic and meromictic hypolimnion samples
hypo_clade_table <- bog_subset("TBH|SSH|NSH|MAH|HKH", clade_table)
hits <- match(mixes, substr(colnames(hypo_clade_table), start = 1, stop = 10))
hypo_clade_table <- hypo_clade_table[,-hits]
#Remove tag indicating taxonomy level from rownames
get.names <- strsplit(rownames(hypo_clade_table), "__")
hypo.clade.names <- c()
for(i in 1:length(get.names)){
if(length(get.names[[i]]) == 2){
hypo.clade.names[i] <- get.names[[i]][2]
}else{
hypo.clade.names[i] <- rownames(hypo_clade_table)[i]
}
}
rownames(hypo_clade_table) <- make.unique(hypo.clade.names)
#Plot rank abundance curve for 20 most abundant hypolimnion clades
hypo_clade_sums <- sort(rowSums(hypo_clade_table), decreasing = T)
plot_hypo_clades <- data.frame(names(hypo_clade_sums)[1:20], hypo_clade_sums[1:20])
colnames(plot_hypo_clades) <- c("Clade", "Abundance")
plot_hypo_clades$Clade <- factor(plot_hypo_clades$Clade, levels=plot_hypo_clades$Clade)
ggplot(data=plot_hypo_clades, aes(x=Clade, y=Abundance)) + geom_bar(stat = "identity", fill = "grey", colour="black") + labs(x = NULL, y = "Observed Reads in Hypolimnia") + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 12, colour = "black"), axis.title = element_text(size = 12, vjust=2), axis.text.y = element_text(colour="black")) + scale_y_continuous(expand = c(0,0)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
lakes <- c("CB", "FB", "WS", "NS", "TB", "SS", "HK", "MA")
epilimnia <- bog_subset("..E", otu_table)
hypolimnia <- bog_subset("..H", otu_table)
epi.evenness <- apply(epilimnia, 2, pielou)
hypo.evenness <- apply(hypolimnia, 2, pielou)
epi.lakes <- substr(names(epi.evenness), start=1, stop=2)
hypo.lakes <- substr(names(hypo.evenness), start=1, stop=2)
epi.data <- data.frame(epi.lakes, epi.evenness)
hypo.data <- data.frame(hypo.lakes, hypo.evenness)
epi.data$epi.lakes <- ordered(epi.data$epi.lakes, levels = lakes)
hypo.data$hypo.lakes <- ordered(hypo.data$hypo.lakes, levels = lakes)
ggplot(data=epi.data, aes(y=epi.evenness, x=epi.lakes)) + geom_boxplot() + labs(y="Observed Richness", x = NULL) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust=2), axis.text.y = element_text(colour="black", size = 14))
ggplot(data=hypo.data, aes(y=hypo.chao1, x=hypo.lakes)) + geom_boxplot() + labs(y="Observed Richness", x = NULL) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust=2), axis.text.y = element_text(colour="black", size = 14))
ggplot(data=hypo.data, aes(y=hypo.evenness, x=hypo.lakes)) + geom_boxplot() + labs(y="Observed Richness", x = NULL) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust=2), axis.text.y = element_text(colour="black", size = 14))
pairwise.t.test(epi.data$epi.evenness, epi.data$epi.lakes, paired = F)
pairwise.t.test(hypo.data$hypo.evenness, hypo.data$hypo.lakes, paired = F)
metalakes <- substr(metadata$Sample_Name, start=1, stop=3)
metayears <- substr(metadata$Sample_Name, start=9, stop=10)
metaTBH <- metadata[which(metalakes == "TBH" & metayears == "07"), c(1,2,4)]
metaTBH <- dcast(metaTBH, Sample_Name~Depth, fun.aggregate=mean)
TBHmixes <- extract_date(metaTBH$Sample_Name[which(metaTBH$"0.5" - metaTBH$"7" < 1)])
hypo <- bog_subset(paste("TBH", sep = ""), otu_table)
hypo <- year_subset("07", hypo)
hypo.even <- apply(hypo, 2, pielou)
hypo.date <- extract_date(colnames(hypo))
hypo.even <- hypo.even[c(1:32, 35:80)]
hypo.date <- hypo.date[c(1:32, 35:80)]
TB_evenness <- data.frame(hypo.date, hypo.even)
colnames(TB_evenness) <- c("date", "evenness")
ggplot() + geom_line(data=TB_evenness, aes(x=date, y=evenness), size=1) + labs(title = "Trout Bog", x = NULL, y = "Observed evenness") + geom_vline(xintercept = as.numeric(TBHmixes), linetype = "dashed") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 8, colour = "black"), axis.title = element_text(size = 12, vjust=2), axis.text.y = element_text(colour="black", size=8), plot.title = element_text(size=12, vjust = 2))
metaNSH <- metadata[which(metalakes == "NSH" & metayears == "08"), c(1,2,4)]
metaNSH <- dcast(metaNSH, Sample_Name~Depth, fun.aggregate=mean)
NSHmixes <- extract_date(metaNSH$Sample_Name[which(metaNSH$"0.5" - metaNSH$"4" < 1)])
hypo <- bog_subset(paste("NSH", sep = ""), otu_table)
hypo <- year_subset("08", hypo)
hypo.even <- apply(hypo, 2, pielou)
hypo.date <- extract_date(colnames(hypo))
NS_evenness <- data.frame(hypo.date, hypo.even)
colnames(NS_evenness) <- c("date", "evenness")
ggplot() + geom_line(data=NS_evenness, aes(x=date, y=evenness), size=1.2) + labs(title = "North Sparkling Bog", x = NULL, y = "Observed evenness") + geom_vline(xintercept = as.numeric(NSHmixes), linetype = "dashed") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 8, colour = "black"), axis.title = element_text(size = 12, vjust=2), axis.text.y = element_text(colour="black", size=8), plot.title = element_text(size=12, vjust = 2))
metaCBH <- metadata[which(metalakes == "CBH" & metayears == "07"), c(1,2,4)]
metaCBH <- dcast(metaCBH, Sample_Name~Depth, fun.aggregate=mean)
CBHmixes <- extract_date(metaCBH$Sample_Name[which(metaCBH$"0.5" - metaCBH$"2" < 1)])
hypo <- bog_subset(paste("CBH", sep = ""), otu_table)
hypo <- year_subset("07", hypo)
hypo.even <- apply(hypo, 2, pielou)
hypo.date <- extract_date(colnames(hypo))
CB_evenness <- data.frame(hypo.date, hypo.even)
colnames(CB_evenness) <- c("date", "evenness")
ggplot() + geom_line(data=CB_evenness, aes(x=date, y=evenness), size=1.2) + labs(title = "Crystal Bog", x = NULL, y = "Observed evenness") + geom_vline(xintercept = as.numeric(CBHmixes), linetype = "dashed") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 8, colour = "black"), axis.title = element_text(size = 12, vjust=2), axis.text.y = element_text(colour="black", size=8), plot.title = element_text(size=12, vjust = 2))
metaFBH <- metadata[which(metalakes == "FBH" & metayears == "07"), c(1,2,4)]
metaFBH <- dcast(metaFBH, Sample_Name~Depth, fun.aggregate=mean)
FBHmixes <- extract_date(metaFBH$Sample_Name[which(metaFBH$"0.5" - metaFBH$"1.5" < 1)])
hypo <- bog_subset(paste("FBH", sep = ""), otu_table)
hypo <- year_subset("07", hypo)
hypo.even <- apply(hypo, 2, pielou)
hypo.date <- extract_date(colnames(hypo))
FB_evenness <- data.frame(hypo.date, hypo.even)
colnames(FB_evenness) <- c("date", "evenness")
ggplot() + geom_line(data=FB_evenness, aes(x=date, y=evenness), size=1.2) + labs(title = "Forestry Bog", x = NULL, y = "Observed evenness") + geom_vline(xintercept = as.numeric(FBHmixes), linetype = "dashed") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 8, colour = "black"), axis.title = element_text(size = 12, vjust=2), axis.text.y = element_text(colour="black", size=8), plot.title = element_text(size=12, vjust = 2))
lakes <- c("CB", "FB", "WS", "NS", "TB", "SS", "HK", "MA")
#Split epilimnion and hypolimnion into separate tables
epilimnia <- bog_subset("..E", otu_table)
hypolimnia <- bog_subset("..H", otu_table)
#Calculate observed richness
epi.evenness <- apply(epilimnia, 2, pielou)
hypo.evenness <- apply(hypolimnia, 2, pielou)
#Extract sampling location from sample names
epi.lakes <- substr(names(epi.evenness), start=1, stop=2)
hypo.lakes <- substr(names(hypo.evenness), start=1, stop=2)
#Make dataframe for plotting
epi.data <- data.frame(epi.lakes, epi.evenness)
hypo.data <- data.frame(hypo.lakes, hypo.evenness)
epi.data$epi.lakes <- ordered(epi.data$epi.lakes, levels = lakes)
hypo.data$hypo.lakes <- ordered(hypo.data$hypo.lakes, levels = lakes)
#2A
ggplot(data=epi.data, aes(y=epi.evenness, x=epi.lakes)) + geom_boxplot() + labs(y="Observed Richness", x = NULL) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust=2), axis.text.y = element_text(colour="black", size = 14))
)
#2B
ggplot(data=hypo.data, aes(y=hypo.evenness, x=hypo.lakes)) + geom_boxplot() + labs(y="Observed Richness", x = NULL) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust=2), axis.text.y = element_text(colour="black", size = 14))
lakes <- c("CB", "FB", "WS", "NS", "TB", "SS", "HK", "MA")
#Split epilimnion and hypolimnion into separate tables
epilimnia <- bog_subset("..E", otu_table)
hypolimnia <- bog_subset("..H", otu_table)
#Calculate observed richness
epi.chao1 <- apply(epilimnia, 2, obs_richness)
hypo.chao1 <- apply(hypolimnia, 2, obs_richness)
#Extract sampling location from sample names
epi.lakes <- substr(names(epi.chao1), start=1, stop=2)
hypo.lakes <- substr(names(hypo.chao1), start=1, stop=2)
#Make dataframe for plotting
epi.data <- data.frame(epi.lakes, epi.chao1)
hypo.data <- data.frame(hypo.lakes, hypo.chao1)
epi.data$epi.lakes <- ordered(epi.data$epi.lakes, levels = lakes)
hypo.data$hypo.lakes <- ordered(hypo.data$hypo.lakes, levels = lakes)
ggplot(data=epi.data, aes(y=epi.chao1, x=epi.lakes)) + geom_boxplot() + labs(y="Observed Richness", x = NULL) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust=2), axis.text.y = element_text(colour="black", size = 14))
ggplot(data=hypo.data, aes(y=hypo.chao1, x=hypo.lakes)) + geom_boxplot() + labs(y="Observed Richness", x = NULL) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(axis.text.x = element_text(hjust = 1, size = 16, colour = "black"), axis.title = element_text(size = 18, vjust=2), axis.text.y = element_text(colour="black", size = 14))
head(hypo.data)
hist(hypo.data$hypo.chao1[which(hypo.lakes == "CB"),])
hist(hypo.data$hypo.chao1[which(hypo.lakes == "CB")])
hist(hypo.data$hypo.chao1[which(hypo.lakes == "FB")])
hist(hypo.data$hypo.chao1[which(hypo.lakes == "TB")])
hist(hypo.data$hypo.chao1[which(hypo.lakes == "NS")])
hist(hypo.data$hypo.chao1[which(hypo.lakes == "SS")])
hist(hypo.data$hypo.chao1[which(hypo.lakes == "HK")])
hist(hypo.data$hypo.chao1[which(hypo.lakes == "MA")])
setwd("C:/Users/amlinz16/Desktop/North_Temperate_Lakes-Microbial_Observatory/Network_analysis")
TBH.network <- read.table(file = "TBH_network_25Jan16.txt", header=T)
head(TBH.network)
TBH.edges1 <- table(TBH.network$index1)
TBH.edges1
TBH.edges <- table(c(TBH.network$index1, TBH.network$index2))
TBH.edges
c(TBH.network$index1, TBH.network$index2)
TBH.network$index1
c(as.character(TBH.network$index1), as.character(TBH.network$index2))
TBH.edges <- table(c(as.character(TBH.network$index1), as.character(TBH.network$index2)))
TBH.edges
i=1
hits <- which(TBH.network$index1 == names(table)[i] | TBH.network$index2 == names(table)[i])
hits <- which(TBH.network$index1 == names(TBH.edges)[i] | TBH.network$index2 == names(TBH.edges)[i])
hits
TBH.edges[1]
mean(TBH.network$LSA[hits])
TBH.corr <- c()
for(i in 1:length(TBH.edges)){
hits <- which(TBH.network$index1 == names(TBH.edges)[i] | TBH.network$index2 == names(TBH.edges)[i])
TBH.corr[i] <- mean(TBH.network$LSA[hits])
}
TBH.corr
TBH.quant <- TBH.edges * TBH.corr
TBH.quant
TBH.edges
