{
    "contents" : "#Indicator species script\n\n#Based on \"indicspecies\" tutorial\n\ninstall.packages(\"indicspecies\")\nlibrary(indicspecies)\nlibrary(OTUtable)\n\ndata(otu_table)\ndata(taxonomy)\n\n#My community matrix (otu_table) needs to have sites as rows and taxa as columns\n#I'm going to only use the 2007 data from CB, NS, SS, TB, and MA for this initial pass.\n#Things that are significant in this subset will be tested on the other years\n#I also want to this at the clade level and otu level\n\nseven <- year_subset(\"07\", otu_table)\nCB <- bog_subset(\"CB.\", seven)\nNS <- bog_subset(\"NS.\", seven)\nTB <- bog_subset(\"TB.\", seven)\nSS <- bog_subset(\"SS.\", seven)\nMA <- bog_subset(\"MA.\", seven)\n\notu_comm <- cbind(CB, NS, TB, SS, MA)\nclade_comm <- combine_otus(\"Clade\", otu_comm, taxonomy)\nclade_comm <- reduce_names(clade_comm)\n\notu_comm <- t(otu_comm)\nclade_comm <- t(clade_comm)\n\notu_comm <- as.data.frame(otu_comm)\nclade_comm <- as.data.frame(clade_comm)\n\n#I also need vectors of group keys that tell me what site groups are.\n#Approach: use substr to pull out only characters in the sample id of interest, then a mini key and which statements to assign a number to each group\n#Reminder: sampleids are now in rownames. otu and clade level are the same so I can just make single site group key\n\nsampleids <- rownames(otu_comm)\nlayer <- substr(sampleids, start=3, stop=3)\nlakes <- substr(sampleids, start=1, stop=2)\n#Epi vs Hypo\n\nlayerid <- c(\"E\", \"H\")\n\nepi_v_hypo <- c()\nfor(i in 1:length(layerid)){\n  epi_v_hypo[which(layer == layerid[i])] <- i\n}\n\n#Lake\nlakeid <- c(\"CB\", \"NS\", \"TB\", \"SS\", \"MA\")\n\nlake_groups <- c()\nfor(i in 1:length(lakeid)){\n  lake_groups[which(lakes == lakeid[i])] <- i\n}\n\n#Lake-layer\nlake_layer_groups <- c()\nfor(i in 1:length(lakeid)){\n  for(j in 1:length(layerid)){\n    lake_layer_groups[which(lakes == lakeid[i] & layer == layerid[j])] <- i*j\n  }\n}\n\n#Mixing Regime (seperate by epi vs hypo)\n\nmixing_groups <- c()\n\nmixing_groups[which(lakes == \"CB\" & layer == \"E\")] <- 1\nmixing_groups[which(lakes == \"CB\" & layer == \"H\")] <- 2\nmixing_groups[which(lakes == \"TB\" & layer == \"E\"| lakes == \"NS\" & layer == \"E\"| lakes == \"SS\" & layer == \"E\")] <- 3\nmixing_groups[which(lakes == \"TB\" & layer == \"H\"| lakes == \"NS\" & layer == \"H\"| lakes == \"SS\" & layer == \"H\")] <- 4\nmixing_groups[which(lakes == \"MA\" & layer == \"E\")] <- 5\nmixing_groups[which(lakes == \"MA\" & layer == \"H\")] <- 6\n\n#Key: PolyE = 1, PolyH = 2, DiE=3, DiH=4, MeroE = 5, meroH=6\n\n\n#Now run the core indicspecies function, multiplatt, on these combinations\n\n#Note from first runthrough of epi vs hypo: TONs below 0.05 significance, even a lot (222) at 0.001. More permutations may be needed to get even lower significance values.\n#Clades are looking good though! 29 and 106 indicator species found. species seem to make sense (ex Synechococcus and Rhodobacter for epi, Syntrophacaea, Chlorobi, Chloroflexi, and Geobacter for hypo)\n#with more groups, OTUs take forever and don't yield as much information\n\n#OTUs by layer\n\notu_by_layer <- multipatt(x = otu_comm, cluster = epi_v_hypo, control = how(nperm = 999))\n\nsummary(otu_by_layer, alpha = 0.001)\n\n#Clades by layer\n\nclade_by_layer <- multipatt(x = clade_comm, cluster = epi_v_hypo, control = how(nperm = 999))\n\nsummary(clade_by_layer, alpha = 0.001)\n\n#OTUs by mixing regime\n\notu_by_mixing <- multipatt(x = otu_comm, cluster = mixing_groups, control = how(nperm = 999))\n\nsummary(otu_by_mixing, alpha = 0.001)\n\n#Clades by mixing regime\n\nclade_by_mixing <- multipatt(x = clade_comm, cluster = mixing_groups, control = how(nperm = 999))\n\nsummary(clade_by_mixing, alpha = 0.001)\n#No indicators for 1,2,3 - polyE, polyH, diE. Many for others, especially meroH. Lots of candidate phyla in that one, too\n\n#Clades by lake-layer\n\nclade_by_lake_layer <- multipatt(x = clade_comm, cluster = lake_layer_groups, control = how(nperm = 999))\n\nsummary(clade_by_lake_layer, alpha = 0.001)\n\n#Clades by epi vs hypo and clades by mixing regime look promising. Let's dial up the number permutations and try again.\n\nclade_by_layer <- multipatt(x = clade_comm, cluster = epi_v_hypo, control = how(nperm = 9999))\n\nsummary(clade_by_layer, alpha = 0.0001)\n\n#Didn't actually reduce numbers that much. Significance now 1e-04\n\nclade_by_mixing <- multipatt(x = clade_comm, cluster = mixing_groups, control = how(nperm = 9999))\n\nsummary(clade_by_mixing, alpha = 0.001)\n\n#Repeat with only hypolimnia (to reduce bias from things not appearing in epilimnia)\nCB <- bog_subset(\"CBH\", seven)\nNS <- bog_subset(\"NSH\", seven)\nTB <- bog_subset(\"TBH\", seven)\nSS <- bog_subset(\"SSH\", seven)\nMA <- bog_subset(\"MAH\", seven)\n\notu_comm <- cbind(CB, NS, TB, SS, MA)\nclade_comm <- combine_otus(\"Clade\", otu_comm, taxonomy)\nclade_comm <- reduce_names(clade_comm)\n\n\nclade_comm <- t(clade_comm)\n\nclade_comm <- as.data.frame(clade_comm)\n\nsampleids <- rownames(clade_comm)\nlayer <- substr(sampleids, start=3, stop=3)\nlakes <- substr(sampleids, start=1, stop=2)\n\nmixing_groups_hypo <- c()\n\nmixing_groups_hypo[which(lakes == \"CB\")] <- 1\nmixing_groups_hypo[which(lakes == \"TB\" | lakes == \"NS\" | lakes == \"SS\") ] <- 2\nmixing_groups_hypo[which(lakes == \"MA\")] <- 3\n\n\n\nclade_by_mixing <- multipatt(x = clade_comm, cluster = mixing_groups_hypo, control = how(nperm = 9999))\n\n#there is also a species association test - worth a shot I guess!\n\n#Will stick with the hypo data set to see if it works\n\ncombined_clade_comm <- combinespecies(clade_comm, max.order = 10)\n#Too large of dataset. Well that answers that question.\n\n#Next step is to test this out on the other years - are the same groups found? \"let's see if I can do this using the indicators() and predict.indicators() functions\n\n#This function is slow: reduce size of dataset\n\n\n\n\nCB <- bog_subset(\"CBH\", seven)\nNS <- bog_subset(\"NSH\", seven)\nTB <- bog_subset(\"TBH\", seven)\nSS <- bog_subset(\"SSH\", seven)\nMA <- bog_subset(\"MAH\", seven)\n\notu_comm <- cbind(CB, NS, TB, SS, MA)\nclade_comm <- reduce_names(clade_comm)\nclade_comm <- remove_reps(clade_comm)\nclade_comm <- combine_otus(\"Clade\", otu_comm, taxonomy)\nclade_comm <- clade_comm[which(rowSums(clade_comm) > quantile(rowSums(clade_comm))[3]),]\nclade_comm <- t(clade_comm)\nclade_comm <- as.data.frame(clade_comm)\n\nsampleids <- rownames(clade_comm)\nlayer <- substr(sampleids, start=3, stop=3)\nlakes <- substr(sampleids, start=1, stop=2)\n\nmixing_groups_hypo <- c()\n\nmixing_groups_hypo[which(lakes == \"CB\")] <- 1\nmixing_groups_hypo[which(lakes == \"TB\" | lakes == \"NS\" | lakes == \"SS\") ] <- 2\nmixing_groups_hypo[which(lakes == \"MA\")] <- 3\n\n\nsubset_taxa <- indicators(X=clade_comm, cluster = mixing_groups_hypo, group = 2, max.order = 1, func = \"IndVal.g\",nboot = 999, verbose = T) #No combos allowed - too time intensive for a dataset of this size\nprint(subset_taxa, sqrtIVt = 0.9) #0.6 in example. This is just for viewing\n\nplotcoverage(subset_taxa)\n\n\nsubset_taxa2 <- pruneindicators(subset_taxa, At = 0.75, Bt = 0.75, verbose = T)\n\n#Geothrix is the only indicator at this level\n\n#Set up a dataset of 2009 to test Geotrhix as a predictor for dimictic\nnine <- year_subset(\"09\", otu_table)\n\nCB <- bog_subset(\"CBH\", nine)\nNS <- bog_subset(\"NSH\", nine)\nTB <- bog_subset(\"TBH\", nine)\nSS <- bog_subset(\"SSH\", nine)\nMA <- bog_subset(\"MAH\", nine)\n\notu_comm2 <- cbind(CB, NS, TB, SS, MA)\nclade_comm2 <- combine_otus(\"Clade\", otu_comm2, taxonomy)\nclade_comm2 <- reduce_names(clade_comm2)\nclade_comm2 <- remove_reps(clade_comm2)\nclade_comm2 <- clade_comm2[which(rowSums(clade_comm2) > quantile(rowSums(clade_comm2))[3]),] #50th percentile, at least 16 reads\nclade_comm2 <- t(clade_comm2)\nclade_comm2 <- as.data.frame(clade_comm2)\n\np <- predict(subset_taxa, clade_comm2)\np <- predict(subset_taxa2, clade_comm2)\n\n#Seems like Geothrix and co was an indicator because it is everywhere. Not great.\n#Maybe that is a trait of dimictic? Will try with poly and mero\n\n#poly predictors\n\nsubset_taxa <- indicators(X=clade_comm, cluster = mixing_groups_hypo, group = 1, max.order = 1, func = \"IndVal.g\",nboot = 999, verbose = T)\nprint(subset_taxa, sqrtIVt = 0.9)\nsubset_taxa2 <- pruneindicators(subset_taxa, At = 0.75, Bt = 0.75, verbose = T)\np <- predict(subset_taxa, clade_comm2)\np <- predict(subset_taxa2, clade_comm2)\n\n#Same case, everything predicted as group1\n\nsubset_taxa <- indicators(X=clade_comm, cluster = mixing_groups_hypo, group = 3, max.order = 1, func = \"IndVal.g\",nboot = 999, verbose = T)\nprint(subset_taxa, sqrtIVt = 0.9)\nsubset_taxa2 <- pruneindicators(subset_taxa, sqrtIVt = 0.9, verbose = T)\np <- predict(subset_taxa, clade_comm2)\np <- predict(subset_taxa2, clade_comm2)\n\n#Still  having a problem where only the full dataset goes through without errors, but too many indicators resulsts in >.9 probability in all samples. Will try a trimmed down version of the dataset for indicators and predictions.\n############################\n\nclade_table <- combine_otus(\"Clade\", otu_table, taxonomy)\nclade_table <- clade_table[which(rowSums(clade_table) > quantile(rowSums(clade_table), 0.9)),]\n\nclades09 <- year_subset(\"09\", clade_table)\nclades09 <- bog_subset(\"..H\", clades09)\n\nclades07 <- year_subset(\"07\", clade_table)\nCB <- bog_subset(\"CBH\", clades07)\nNS <- bog_subset(\"NSH\", clades07)\nTB <- bog_subset(\"TBH\", clades07)\nSS <- bog_subset(\"SSH\", clades07)\nMA <- bog_subset(\"MAH\", clades07)\nclades07 <- cbind(CB, NS, TB, SS, MA)\n\nclades07 <- remove_reps(clades07)\nclades07 <- reduce_names(clades07)\nclades09 <- remove_reps(clades09)\nclades09 <- reduce_names(clades09)\n\nclades07 <- t(clades07)\nclades07 <- as.data.frame(clades07)\nclades09 <- t(clades09)\nclades09 <- as.data.frame(clades09)\n\nsampleids <- rownames(clades07)\nlayer <- substr(sampleids, start=3, stop=3)\nlakes <- substr(sampleids, start=1, stop=2)\nmixing_groups_hypo <- c()\nmixing_groups_hypo[which(lakes == \"CB\")] <- 1\nmixing_groups_hypo[which(lakes == \"TB\" | lakes == \"NS\" | lakes == \"SS\") ] <- 2\nmixing_groups_hypo[which(lakes == \"MA\")] <- 3\n\n\nsubset_taxa <- indicators(X=clades07, cluster = mixing_groups_hypo, group = 3, max.order = 2, func = \"IndVal.g\",nboot = 999, verbose = T)\nsubset_taxa2 <- pruneindicators(subset_taxa, sqrtIVt = 0.9, verbose = T)\np <- predict(subset_taxa, clades09)\np <- predict(subset_taxa2, clades09)\n\n#Not a lot of options (probabilities look like stepwise function) but seems to be identifying samples pretty well with the pruned indicator (Pirelluceae)\n\n#Try with dimictic next\n\nsubset_taxa <- indicators(X=clades07, cluster = mixing_groups_hypo, group = 2, max.order = 1, func = \"IndVal.g\",nboot = 999, verbose = T)\nsubset_taxa2 <- pruneindicators(subset_taxa, sqrtIVt = 0.8, verbose = T)\np <- predict(subset_taxa, clades09) #Not at all effective\np <- predict(subset_taxa2, clades09) #Also not effective\n\n#Now polymictic\nsubset_taxa <- indicators(X=clades07, cluster = mixing_groups_hypo, group = 1, max.order = 1, func = \"IndVal.g\",nboot = 999, verbose = T)\nsubset_taxa2 <- pruneindicators(subset_taxa, sqrtIVt = 0.9, verbose = T)\np <- predict(subset_taxa, clades09) #Not effective\np <- predict(subset_taxa2, clades09) #Works ok but hits a few in the other bogs\n\n\n#Summary: only works with meromictic for the hypo/mixing regime comparison\n#The single prune indicator works pretty well but gives no gradient of probability\n\n#Can it identify HK as a meromictic, or is this Mary specific?\n\ntest07 <- year_subset(\"07\", clade_table)\ntest07 <- remove_reps(test07)\ntest07 <- reduce_names(test07)\ntest07 <- t(test07)\ntest07 <- as.data.frame(test07)\n\nsubset_taxa <- indicators(X=clades07, cluster = mixing_groups_hypo, group = 3, max.order = 1, func = \"IndVal.g\",nboot = 999, verbose = T)\np <- predict(subset_taxa, test07)\n#Well, it accurately predicts HKH, but also HKE, MAE, WSE, and WSH\n#Not sure what that means",
    "created" : 1441907109295.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1188593477",
    "id" : "EE8263D2",
    "lastKnownWriteTime" : 1442087419,
    "path" : "C:/Users/amlinz16/Dropbox/R Scripts/Used in deblurred dataset/indicator_species.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}