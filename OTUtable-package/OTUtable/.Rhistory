subset_taxa <- indicators(X=clade_comm, cluster = mixing_groups_hypo, group = 2, max.order = 1, func = "IndVal.g",nboot = 999, verbose = T) #No combos allowed
print(subset_taxa, sqrtIVt = 0.6)
print(subset_taxa, sqrtIVt = 0.8)
subset_taxa <- indicators(X=clade_comm, cluster = mixing_groups_hypo, group = 2, max.order = 3, func = "IndVal.g",nboot = 999, verbose = T) #No combos allowed
subset_taxa <- indicators(X=clade_comm, cluster = mixing_groups_hypo, group = 2, max.order = 2, func = "IndVal.g",nboot = 999, verbose = T) #No combos allowed
subset_taxa <- indicators(X=clade_comm, cluster = mixing_groups_hypo, group = 2, max.order = 1, func = "IndVal.g",nboot = 999, verbose = T) #No combos allowed - too time intensive for a datset of this size
plotcoverage(subset_taxa)
subset_taxa2 <- prune_indicators(subset_taxa, At = 0.9, Bt = 0.9, verbose = T)
subset_taxa2 <- pruneindicators(subset_taxa, At = 0.9, Bt = 0.9, verbose = T)
subset_taxa2 <- pruneindicators(subset_taxa, At = 0.8, Bt = 0.8, verbose = T)
subset_taxa2
subset_taxa2 <- pruneindicators(subset_taxa, At = 0.75, Bt = 0.75, verbose = T)
subset_taxa2
print(subset_taxa, sqrtIVt = 0.9) #0.6 in example. This is just for viewing
otu_comm2 <- cbind(CB, NS, TB, SS, MA)
clade_comm2 <- combine_otus("Clade", otu_comm2, taxonomy)
clade_comm2 <- reduce_names(clade_comm2)
clade_comm2 <- remove_reps(clade_comm2)
clade_comm2 <- clade_comm2[which(rowSums(clade_comm2) > quantile(rowSums(clade_comm2))[3]),] #50th percentile, at least 16 reads
clade_comm2 <- t(clade_comm2)
clade_comm2 <- as.data.frame(clade_comm2)
p <- predict(subset_taxa, clade_comm2)
p
subset_taxa <- indicators(X=clade_comm, cluster = mixing_groups_hypo, group = 1, max.order = 1, func = "IndVal.g",nboot = 999, verbose = T)
subset_taxa <- indicators(X=clade_comm, cluster = mixing_groups_hypo, group = 2, max.order = 1, func = "IndVal.g",nboot = 999, verbose = T) #No combos allowed - too time intensive for a dataset of this size
p <- predict(subset_taxa2, clade_comm2)
p
subset_taxa <- indicators(X=clade_comm, cluster = mixing_groups_hypo, group = 1, max.order = 1, func = "IndVal.g",nboot = 999, verbose = T)
print(subset_taxa, sqrtIVt = 0.9)
subset_taxa2 <- pruneindicators(subset_taxa, At = 0.75, Bt = 0.75, verbose = T)
subset_taxa2
p <- predict(subset_taxa, clade_comm2)
p
p <- predict(subset_taxa2, clade_comm2)
p
subset_taxa <- indicators(X=clade_comm, cluster = mixing_groups_hypo, group = 3, max.order = 1, func = "IndVal.g",nboot = 999, verbose = T)
print(subset_taxa, sqrtIVt = 0.9)
subset_taxa2 <- pruneindicators(subset_taxa, At = 0.75, Bt = 0.75, verbose = T)
p <- predict(subset_taxa, clade_comm2)
p
rownames(clade_comm2)
nine <- year_subset("09", otu_table)
CB <- bog_subset("CBH", nine)
NS <- bog_subset("NSH", nine)
TB <- bog_subset("TBH", nine)
SS <- bog_subset("SSH", nine)
MA <- bog_subset("MAH", nine)
clade_comm2 <- combine_otus("Clade", otu_comm2, taxonomy)
colnames(clade_comm2)
colnames(nine)
colnames(CB)
colnames(otu_comm2)
CB <- bog_subset("CBH", nine)
NS <- bog_subset("NSH", nine)
TB <- bog_subset("TBH", nine)
SS <- bog_subset("SSH", nine)
MA <- bog_subset("MAH", nine)
otu_comm2 <- cbind(CB, NS, TB, SS, MA)
colnames(otu_comm2)
clade_comm2 <- combine_otus("Clade", otu_comm2, taxonomy)
clade_comm2 <- reduce_names(clade_comm2)
clade_comm2 <- remove_reps(clade_comm2)
clade_comm2 <- clade_comm2[which(rowSums(clade_comm2) > quantile(rowSums(clade_comm2))[3]),] #50th percentile, at least 16 reads
clade_comm2 <- t(clade_comm2)
clade_comm2 <- as.data.frame(clade_comm2)
p <- predict(subset_taxa, clade_comm2)
p <- predict(subset_taxa2, clade_comm2)
p
subset_taxa2
print(subset_taxa, sqrtIVt = 0.9)
subset_taxa2 <- pruneindicators(subset_taxa, At = 0.5, Bt = 0.5, verbose = T)
subset_taxa2
subset_taxa2 <- pruneindicators(subset_taxa, At = 0.9, Bt = 0.9, verbose = T)
subset_taxa2
subset_taxa2 <- pruneindicators(subset_taxa, sqrtIVt = 0.9, verbose = T)
subset_taxa2
subset_taxa2 <- pruneindicators(subset_taxa, sqrtIVt = 0.5, verbose = T)
subset_taxa2
subset_taxa2 <- pruneindicators(subset_taxa, sqrtIVt = 0.9, verbose = T)
str(subset_taxa)
dim(subset_taxa)
str(subset_taxa2)
p <- predict(subset_taxa, clade_comm2)
CB <- bog_subset("CBH", seven)
NS <- bog_subset("NSH", seven)
TB <- bog_subset("TBH", seven)
SS <- bog_subset("SSH", seven)
MA <- bog_subset("MAH", seven)
otu_comm <- cbind(CB, NS, TB, SS, MA)
clade_comm <- combine_otus("Clade", otu_comm, taxonomy)
clade_comm <- reduce_names(clade_comm)
clade_comm <- remove_reps(clade_comm)
clade_comm <- t(clade_comm)
clade_comm <- as.data.frame(clade_comm)
sampleids <- rownames(clade_comm)
layer <- substr(sampleids, start=3, stop=3)
lakes <- substr(sampleids, start=1, stop=2)
mixing_groups_hypo <- c()
mixing_groups_hypo[which(lakes == "CB")] <- 1
mixing_groups_hypo[which(lakes == "TB" | lakes == "NS" | lakes == "SS") ] <- 2
mixing_groups_hypo[which(lakes == "MA")] <- 3
nine <- year_subset("09", otu_table)
CB <- bog_subset("CBH", nine)
NS <- bog_subset("NSH", nine)
TB <- bog_subset("TBH", nine)
SS <- bog_subset("SSH", nine)
MA <- bog_subset("MAH", nine)
otu_comm2 <- cbind(CB, NS, TB, SS, MA)
clade_comm2 <- combine_otus("Clade", otu_comm2, taxonomy)
clade_comm2 <- reduce_names(clade_comm2)
clade_comm2 <- remove_reps(clade_comm2)
clade_comm2 <- t(clade_comm2)
clade_comm2 <- as.data.frame(clade_comm2)
subset_taxa <- indicators(X=clade_comm, cluster = mixing_groups_hypo, group = 3, max.order = 1, func = "IndVal.g",nboot = 999, verbose = T)
print(subset_taxa, sqrtIVt = 0.9)
subset_taxa2 <- pruneindicators(subset_taxa, sqrtIVt = 0.9, verbose = T)
subset_taxa2
p <- predict(subset_taxa, clade_comm2)
p
CB <- bog_subset("CBH", seven)
NS <- bog_subset("NSH", seven)
TB <- bog_subset("TBH", seven)
SS <- bog_subset("SSH", seven)
MA <- bog_subset("MAH", seven)
otu_comm <- cbind(CB, NS, TB, SS, MA)
clade_comm <- reduce_names(clade_comm)
clade_comm <- remove_reps(clade_comm)
clade_comm <- combine_otus("Clade", otu_comm, taxonomy)
clade_comm <- clade_comm[which(rowSums(clade_comm) > quantile(rowSums(clade_comm))[3]),]
clade_comm <- t(clade_comm)
clade_comm <- as.data.frame(clade_comm)
sampleids <- rownames(clade_comm)
layer <- substr(sampleids, start=3, stop=3)
lakes <- substr(sampleids, start=1, stop=2)
mixing_groups_hypo <- c()
mixing_groups_hypo[which(lakes == "CB")] <- 1
mixing_groups_hypo[which(lakes == "TB" | lakes == "NS" | lakes == "SS") ] <- 2
mixing_groups_hypo[which(lakes == "MA")] <- 3
subset_taxa <- indicators(X=clade_comm, cluster = mixing_groups_hypo, group = 3, max.order = 1, func = "IndVal.g",nboot = 999, verbose = T)
p <- predict(subset_taxa, clade_comm2)
dim(clade_comm)
dim(clade_comm2)
clade_table <- combine_otus("Clade", otu_table, taxonomy)
clades09 <- year_subset("09", clade_table)
clades07 <- year_subset("07", clade_table)
clades09 <- bog_subset("..H", clades09)
clades07 <- year_subset("07", clade_table)
CB <- bog_subset("CBH", clades07)
NS <- bog_subset("NSH", clades07)
TB <- bog_subset("TBH", clades07)
SS <- bog_subset("SSH", clades07)
MA <- bog_subset("MAH", clades07)
clades07 <- cbind(CB, NS, TB, SS, MA)
clade_table <- clade_table[which(rowSums(clade_table) > quantile(rowSums(clade_table))[3]),]
clades09 <- year_subset("09", clade_table)
clades09 <- bog_subset("..H", clades09)
clades07 <- year_subset("07", clade_table)
CB <- bog_subset("CBH", clades07)
NS <- bog_subset("NSH", clades07)
TB <- bog_subset("TBH", clades07)
SS <- bog_subset("SSH", clades07)
MA <- bog_subset("MAH", clades07)
clades07 <- cbind(CB, NS, TB, SS, MA)
clades07 <- remove_reps(clades07)
clades07 <- reduce_names(clades07)
clades09 <- remove_reps(clades09)
clades09 <- reduce_names(clades09)
clades07 <- t(clades07)
clades07 <- as.data.frame(clades07)
clades09 <- t(clades09)
clades09 <- as.data.frame(clades09)
sampleids <- rownames(clades07)
layer <- substr(sampleids, start=3, stop=3)
lakes <- substr(sampleids, start=1, stop=2)
mixing_groups_hypo <- c()
mixing_groups_hypo[which(lakes == "CB")] <- 1
mixing_groups_hypo[which(lakes == "TB" | lakes == "NS" | lakes == "SS") ] <- 2
mixing_groups_hypo[which(lakes == "MA")] <- 3
subset_taxa <- indicators(X=clade_comm, cluster = mixing_groups_hypo, group = 3, max.order = 1, func = "IndVal.g",nboot = 999, verbose = T)
subset_taxa <- indicators(X=clades07, cluster = mixing_groups_hypo, group = 3, max.order = 1, func = "IndVal.g",nboot = 999, verbose = T)
print(subset_taxa, sqrtIVt = 0.9)
subset_taxa2 <- pruneindicators(subset_taxa, sqrtIVt = 0.9, verbose = T)
subset_taxa2
p <- predict(subset_taxa, clade_comm2)
p
str(subset_taxa)
p <- predict(subset_taxa2, clade_comm2)
p
subset_taxa <- indicators(X=clades07, cluster = mixing_groups_hypo, group = 3, max.order = 2, func = "IndVal.g",nboot = 999, verbose = T)
tax <- read.csv(file.choose(), header=T, row.names=1)
head(tax)
library(devtools)
use_data(tax, overwrite = T)
library(OTUtable)
data(metadata)
head(metadata)
tail(metadata)
range(metadata$Depth)
range(metadata$DO)
str(metadata)
range(metadata$DO[which(is.na(metadata$DO) == F)])
hist(metadata$D)
hist(metadata$DO)
which(metadata$DO == 153)
metadata[,which(metadata$DO == 153)]
metadata[which(metadata$DO == 153),]
metadata <- read.csv(file.choose(), header=T, row.names=1)
metadata <- read.csv(file.choose(), header=T)
head(metadata)
hist(metadata$DO)
hist(metadata$Temperature)
hist(metadata$pH)
hist(metadata$Secchi.Depth)
use.data(metadata, overwrite = T)
use_data(metadata, overwrite = T)
taxonomy <- read.csv(file.choose(), header=T, row.names=1)
use_data(taxonomy, overwrite = T)
library(OTUtable)
setwd("C:/Users/Alex/Dropbox")
install.packages(file.choose(), repos=NULL)
library(OTUtable)
library(OTUtable)
data(otu_table)
data(taxonomy)
data(metadata)
clade_table <- combine_otus("Clade", otu_table, taxonomy)
CoV <- function(vector){
x <- mean(vector)
y <- sd(vector)
return(y/x)
}
taxonomy <- read.csv(file.choose(), header = T, row.names = 1, colClasses = "character")
library(devtools)
use_data(taxonomy, overwrite = T)
install.packages(file.choose(), repos=F)
library(OTUtable)
install.packages(file.choose(), repos=F)
metadata <- read.csv(file.choose(), header=T)
head(metadata)
hist(metadata$DO)
use.data(metadata, overwrite = T)
library(devtools)
use.data(metadata, overwrite = T)
use_data(metadata, overwrite = T)
library(OTUtable)
install.packages(file.choose(), repos=NULL)
library(devtools)
metadata <- read.csv(file.choose(), header=T)
str(metadata)
metadata$Sample_Name <- as.character(metadata$Sample_Name)
use_data(metadata, overwrite = T)
library(devtools)
use_data(metadata, overwrite = T)
use.data(metadata, overwrite = T)
install.packages("devtools")
metadata <- read.csv(file.choose(), header=T)
metadata$Sample_Name <- as.character(metadata$Sample_Name)
str(metadata)
head(metadata)
metadata <- read.csv(file.choose(), header=T)
metadata$Sample_Name <- as.character(metadata$Sample_Name)
str(metadata)
head(metadata)
library(devtools)
use_data(metadata, overwrite=T)
library(OTUtable)
library(OTUtable)
x <- expand_taxa(file.choose())
head(x)
library("dev_tools")
library("devtools")
x <- taxonomy
use_data(taxonomy, overwrite=T)
install.packages("devtools")
detach_package("devtools")
library(OTUtable)
library(devtools)
taxonomy <- expand_taxa(file.choose())
use_data(taxonomy, overwrite=T)
library(OTUtable)
taxonomy <- expand_taxa(file.choose())
head(taxonomy)
library(devtool)
library(devtools)
use_data(taxonomy, overwrite=T)
shared_file <- file.choose()
x <- read.table(shared_file, header = T, row.names = 2)
head(x)
head(colnames(x))
x$label <- NULL
x$numOtus <- NULL
head(rownames(x))
samples <- substr(rownames(x), start = 1, stop = 12)
head(samples)
tail(samples)
split.names <- strsplit(rownames(x), split = ".")
head(split.names)
split.names <- strsplit(rownames(x), split = "/.")
head(split.names)
split.names <- strsplit(rownames(x), split = "//.")
head(split.names)
split.names <- strsplit(rownames(x), split = "\\.")
head(split.names)
split.names[[5]][1]
clean_shared <- function(shared_file, trim.names){
x <- read.table(shared_file, header = T, row.names = 2)
x$label <- NULL
x$numOtus <- NULL
if(trim.names == T){
split.names <- strsplit(rownames(x), split = "\\.")
samples <- c()
for(i in 1:length(split.names)){
samples[i] <- split.names[[i]][1]
}
rownames(x) <- make.unique(samples)
}
x <- t(x)
}
clean_shared <- function(shared_file, trim.names){
x <- read.table(shared_file, header = T, row.names = 2)
x$label <- NULL
x$numOtus <- NULL
if(trim.names == T){
split.names <- strsplit(rownames(x), split = "\\.")
samples <- c()
for(i in 1:length(split.names)){
samples[i] <- split.names[[i]][1]
}
rownames(x) <- make.unique(samples)
}
x <- t(x)
return(x)
}
x <- clean_shared(shared_file, trim.names=T)
str(x)
x[1:10, 1:10]
taxonomy_file <- file.choose()
tax <- read.csv(file = taxonomy_file, header = T, row.names = 1, colClasses = c("character"))
sp <- strsplit(tax$Taxonomy, split = ";")
kingdom <- c()
phyla <- c()
class <- c()
order <- c()
lineage <- c()
tribe <- c()
clade <- c()
for(i in 1:length(sp)){
group <- sp[i][[1]]
kingdom[i] <- group[1]
phyla[i] <- group[2]
order[i] <- group[4]
lineage[i] <- group[5]
clade[i] <- group[6]
class[i] <- group[3]
tribe[i] <- group[7]
}
head(kingdom)
kingdom <- gsub("\\(\\d*\\)", "", kingdom)
head(kingdom)
data(metadata)
colnames(metadata)
methylophilaceae <- grab_group("Methylophilaceae|betIV", "Clade", otu_table, taxonomy)
data(otu_table)
methylophilaceae <- grab_group("Methylophilaceae|betIV", "Clade", otu_table, taxonomy)
rownames(methylophilaceae)
methylophilaceae <- grab_group("Methylophilaceae|betIV", "Lineage", otu_table, taxonomy)
rownames(methylophilaceae)
colnames(taxonomy)
data(otu_table)
data(taxonomy)
example_table <- year_subset("05", otu_table)
example_table <- bog_subset("TBE", example_table)
phylum_table <- combine_otus("Phylum", example_table, taxonomy)
str(phylum_table)
rownames(phylum_table)
example <- year_subset("05", otu_table)
example <- bog_subset("TBE", example)
z_otu_table <- zscore(example)
head(z_otu_table)
example <- example[which(rowSums(example) > 0), ]
z_otu_table <- zscore(example)
head(z_otu_table)
metadata_matrix <- function(sampleID, field_data, type){
#Pull out only entries for sample subset
find <- grep(sampleID, field_data$Sample_Name)
field_data <- field_data[find,]
#Get date and depth information
dates <- unique(extract_date(field_data$Sample_Name))
depth <- sort(unique(field_data$Depth))
#Set up matrix
data_matrix <- matrix(0, nrow=length(depth), ncol=length(dates))
#Put depths in rows and dates in columns, put data point in correct coordinates
if(type = "DO"){
for(i in 1:length(depth)){
row <- field_data[which(field_data$Depth == depth[i]),]
for(j in 1:length(dates)){
col <- row[which(extract_date(row$Sample_Name) == dates[j]),]
data_matrix[i,j] <- col$DO[1]
}
}
}else if(type = "Temperature"){
for(i in 1:length(depth)){
row <- field_data[which(field_data$Depth == depth[i]),]
for(j in 1:length(dates)){
col <- row[which(extract_date(row$Sample_Name) == dates[j]),]
data_matrix[i,j] <- col$Temperature[1]
}
}
}
#Add labels to matrix and order by date
rownames(data_matrix) <- depth
colnames(data_matrix) <- as.character(dates)
data_matrix <- data_matrix[,order(dates)]
#Fill in missing datapoints by averaging depth above and below
for(i in 1:(dim(data_matrix)[1]-1)){
for(j in 1:dim(data_matrix)[2]){
if(is.na(data_matrix[i,j]) == T){
data_matrix[i,j] <- mean(c(data_matrix[i-1, j], data_matrix[i+1, j]))
}
}
}
#If missing point is the deepest point, take the second deepest point
i=dim(data_matrix)[1]
for(j in 1:dim(data_matrix)[2]){
if(is.na(data_matrix[i,j]) == T){
data_matrix[i,j] <- data_matrix[i-1, j]
}
}
return(data_matrix)
}
metadata_matrix <- function(sampleID, field_data, type){
#Pull out only entries for sample subset
find <- grep(sampleID, field_data$Sample_Name)
field_data <- field_data[find,]
#Get date and depth information
dates <- unique(extract_date(field_data$Sample_Name))
depth <- sort(unique(field_data$Depth))
#Set up matrix
data_matrix <- matrix(0, nrow=length(depth), ncol=length(dates))
#Put depths in rows and dates in columns, put data point in correct coordinates
if(type == "DO"){
for(i in 1:length(depth)){
row <- field_data[which(field_data$Depth == depth[i]),]
for(j in 1:length(dates)){
col <- row[which(extract_date(row$Sample_Name) == dates[j]),]
data_matrix[i,j] <- col$DO[1]
}
}
}else if(type == "Temperature"){
for(i in 1:length(depth)){
row <- field_data[which(field_data$Depth == depth[i]),]
for(j in 1:length(dates)){
col <- row[which(extract_date(row$Sample_Name) == dates[j]),]
data_matrix[i,j] <- col$Temperature[1]
}
}
}
library(OTUtable)
data(taxonomy)
head(taxonomy)
data(otu_table)
example <- year_subset("05", otu_table)
example <- bog_subset("TBE", example)
dim(example)
example <- example[which(rowSums(example) > 0),]
dim(example)
clade_table <- combine_otus("Clade", example, taxonomy
)
head(clade_table)
str(clade_table)
str(example)
str(taxonomy)
level <- "Clade"
table <- example
key <- match(level, colnames(taxonomy))
key
head(taxonomy)
colnames(taxonomy)[key]
column <- c()
for(i in 1:dim(taxonomy)[1]){
column[i] <- paste(taxonomy[i, 1:key], collapse = ";")
}
head(column)
length(column)
unique_groups <- unique(column)
length(unique_groups)
new_table <- rep(NA, dim(table)[2])
for(i in 1:length(unique_groups)){
members <- which(column == unique_groups[i])
if(length(members) > 1){
member_abun <- colSums(table[members, ])
new_table <- rbind(new_table, member_abun)
}else{
member_abun <- table[members,]
new_table <- rbind(new_table, member_abun)
}
}
str(new_table)
new_table <- rep(NA, dim(table)[2])
new_table
i=1
members <- which(column == unique_groups[i])
members
member_abun <- colSums(table[members, ])
member_abun
table[members,]
dim(table)
example <- year_subset("05", otu_table)
example <- bog_subset("TBE", example)
clade_table <- combine_otus("Clade", example, taxonomy)
str(clade_table)
head(clade_table)
