tax <- read.csv(file = taxonomy_file, header = T, row.names = 1, colClasses = c("character"))
sp <- strsplit(tax$Taxonomy, split = ";")
kingdom <- c()
phyla <- c()
class <- c()
order <- c()
lineage <- c()
tribe <- c()
clade <- c()
for(i in 1:length(sp)){
group <- sp[i][[1]]
kingdom[i] <- group[1]
phyla[i] <- group[2]
order[i] <- group[4]
lineage[i] <- group[5]
clade[i] <- group[6]
class[i] <- group[3]
tribe[i] <- group[7]
}
head(kingdom)
kingdom <- gsub("\\(\\d*\\)", "", kingdom)
head(kingdom)
data(metadata)
colnames(metadata)
methylophilaceae <- grab_group("Methylophilaceae|betIV", "Clade", otu_table, taxonomy)
data(otu_table)
methylophilaceae <- grab_group("Methylophilaceae|betIV", "Clade", otu_table, taxonomy)
rownames(methylophilaceae)
methylophilaceae <- grab_group("Methylophilaceae|betIV", "Lineage", otu_table, taxonomy)
rownames(methylophilaceae)
colnames(taxonomy)
data(otu_table)
data(taxonomy)
example_table <- year_subset("05", otu_table)
example_table <- bog_subset("TBE", example_table)
phylum_table <- combine_otus("Phylum", example_table, taxonomy)
str(phylum_table)
rownames(phylum_table)
example <- year_subset("05", otu_table)
example <- bog_subset("TBE", example)
z_otu_table <- zscore(example)
head(z_otu_table)
example <- example[which(rowSums(example) > 0), ]
z_otu_table <- zscore(example)
head(z_otu_table)
metadata_matrix <- function(sampleID, field_data, type){
#Pull out only entries for sample subset
find <- grep(sampleID, field_data$Sample_Name)
field_data <- field_data[find,]
#Get date and depth information
dates <- unique(extract_date(field_data$Sample_Name))
depth <- sort(unique(field_data$Depth))
#Set up matrix
data_matrix <- matrix(0, nrow=length(depth), ncol=length(dates))
#Put depths in rows and dates in columns, put data point in correct coordinates
if(type = "DO"){
for(i in 1:length(depth)){
row <- field_data[which(field_data$Depth == depth[i]),]
for(j in 1:length(dates)){
col <- row[which(extract_date(row$Sample_Name) == dates[j]),]
data_matrix[i,j] <- col$DO[1]
}
}
}else if(type = "Temperature"){
for(i in 1:length(depth)){
row <- field_data[which(field_data$Depth == depth[i]),]
for(j in 1:length(dates)){
col <- row[which(extract_date(row$Sample_Name) == dates[j]),]
data_matrix[i,j] <- col$Temperature[1]
}
}
}
#Add labels to matrix and order by date
rownames(data_matrix) <- depth
colnames(data_matrix) <- as.character(dates)
data_matrix <- data_matrix[,order(dates)]
#Fill in missing datapoints by averaging depth above and below
for(i in 1:(dim(data_matrix)[1]-1)){
for(j in 1:dim(data_matrix)[2]){
if(is.na(data_matrix[i,j]) == T){
data_matrix[i,j] <- mean(c(data_matrix[i-1, j], data_matrix[i+1, j]))
}
}
}
#If missing point is the deepest point, take the second deepest point
i=dim(data_matrix)[1]
for(j in 1:dim(data_matrix)[2]){
if(is.na(data_matrix[i,j]) == T){
data_matrix[i,j] <- data_matrix[i-1, j]
}
}
return(data_matrix)
}
metadata_matrix <- function(sampleID, field_data, type){
#Pull out only entries for sample subset
find <- grep(sampleID, field_data$Sample_Name)
field_data <- field_data[find,]
#Get date and depth information
dates <- unique(extract_date(field_data$Sample_Name))
depth <- sort(unique(field_data$Depth))
#Set up matrix
data_matrix <- matrix(0, nrow=length(depth), ncol=length(dates))
#Put depths in rows and dates in columns, put data point in correct coordinates
if(type == "DO"){
for(i in 1:length(depth)){
row <- field_data[which(field_data$Depth == depth[i]),]
for(j in 1:length(dates)){
col <- row[which(extract_date(row$Sample_Name) == dates[j]),]
data_matrix[i,j] <- col$DO[1]
}
}
}else if(type == "Temperature"){
for(i in 1:length(depth)){
row <- field_data[which(field_data$Depth == depth[i]),]
for(j in 1:length(dates)){
col <- row[which(extract_date(row$Sample_Name) == dates[j]),]
data_matrix[i,j] <- col$Temperature[1]
}
}
}
library(OTUtable)
data(taxonomy)
head(taxonomy)
data(otu_table)
example <- year_subset("05", otu_table)
example <- bog_subset("TBE", example)
dim(example)
example <- example[which(rowSums(example) > 0),]
dim(example)
clade_table <- combine_otus("Clade", example, taxonomy
)
head(clade_table)
str(clade_table)
str(example)
str(taxonomy)
level <- "Clade"
table <- example
key <- match(level, colnames(taxonomy))
key
head(taxonomy)
colnames(taxonomy)[key]
column <- c()
for(i in 1:dim(taxonomy)[1]){
column[i] <- paste(taxonomy[i, 1:key], collapse = ";")
}
head(column)
length(column)
unique_groups <- unique(column)
length(unique_groups)
new_table <- rep(NA, dim(table)[2])
for(i in 1:length(unique_groups)){
members <- which(column == unique_groups[i])
if(length(members) > 1){
member_abun <- colSums(table[members, ])
new_table <- rbind(new_table, member_abun)
}else{
member_abun <- table[members,]
new_table <- rbind(new_table, member_abun)
}
}
str(new_table)
new_table <- rep(NA, dim(table)[2])
new_table
i=1
members <- which(column == unique_groups[i])
members
member_abun <- colSums(table[members, ])
member_abun
table[members,]
dim(table)
example <- year_subset("05", otu_table)
example <- bog_subset("TBE", example)
clade_table <- combine_otus("Clade", example, taxonomy)
str(clade_table)
head(clade_table)
library(devtools)
install.packages("devtools")
library(devtools)
otu_table <- read.csv(file.choose(), header = T, row.names = 1)
use_data(otu_table, OTUtable)
use_data(otu_table, OTUtable, overwrite = T)
use_data(otu_table, overwrite = T)
otu_table[1:10, 1:10]
extract_date(colnames(otu_table))
colnames(otu_table)
library(OTUtable)
extract_date(colnames(otu_table))
colnames(otu_table)[which(is.na(extract_date(colnames(otu_table))) == T)]
taxonomy <- read.csv(file.choose(), header = T, row.names = 1)
head(taxonomy)
use_data(taxonomy, overwrite=T)
metadata <- read.csv(file.choose(), header = T, row.names=1)
metadata <- read.csv(file.choose(), header = T)
head(metadata)
use_data(metadata, overwrite = T)
clean_taxonomy <- function(taxonomy_file, table, remove_bootstrap){
tax <- read.table(file=taxonomy_file, header=T, row.names=1, colClasses=c("character"))
tax$Size <- NULL
sp <- strsplit(tax$Taxonomy, split = ";")
kingdom <- c(rep("", length(tax$Taxonomy)))
phyla <- c(rep("", length(tax$Taxonomy)))
class <- c(rep("", length(tax$Taxonomy)))
order <- c(rep("", length(tax$Taxonomy)))
lineage <- c(rep("", length(tax$Taxonomy)))
clade <- c(rep("", length(tax$Taxonomy)))
tribe <- c(rep("", length(tax$Taxonomy)))
for(i in 1:length(sp)){
group <- sp[i][[1]]
kingdom[i] <- group[1]
phyla[i] <- group[2]
class[i] <- group[3]
order[i] <- group[4]
lineage[i] <- group[5]
clade[i] <- group[6]
tribe[i] <- group[7]
}
y <- data.frame(kingdom, phyla, class, order, lineage, clade, tribe, stringsAsFactors=F)
rownames(y) <- rownames(tax)
colnames(y) <- c("Kingdom", "Phylum", "Class", "Order", "Lineage", "Clade", "Tribe")
keep <- match(rownames(y), rownames(table))
y <- y[which(is.na(keep) == F)]
if(remove_bootstrap == T){
y$Kingdom <- gsub("\\(\\d*\\)", "", y$Kingdom)
y$Phylum <- gsub("\\(\\d*\\)", "", y$Phylum)
y$Class <- gsub("\\(\\d*\\)", "", y$Class)
y$Order <- gsub("\\(\\d*\\)", "", y$Order)
y$Lineage <- gsub("\\(\\d*\\)", "", y$Lineage)
y$Clade <- gsub("\\(\\d*\\)", "", y$Clade)
y$Tribe <- gsub("\\(\\d*\\)", "", y$Tribe)
}
return(y)
}
test <- clean_taxonomy(file.choose(), otu_table, remove_bootstrap = T)
testfile <- file.choose()
taxonomy_file <- testfile
table <- otu_table
remove_bootstrap = T
tax <- read.table(file=taxonomy_file, header=T, row.names=1, colClasses=c("character"))
tax$Size <- NULL
sp <- strsplit(tax$Taxonomy, split = ";")
kingdom <- c(rep("", length(tax$Taxonomy)))
head(tax)
testfile
tax <- read.table(file=taxonomy_file, header=T, row.names=1, colClasses=c("character"))
head(tax)
tax <- read.table(file=taxonomy_file, header=T, colClasses=c("character"))
head(tax)
taxonomy_file <- file.choose()
tax <- read.table(file=taxonomy_file, header=T, row.names=1, colClasses=c("character"))
tax$Size <- NULL
sp <- strsplit(tax$Taxonomy, split = ";")
kingdom <- c(rep("", length(tax$Taxonomy)))
phyla <- c(rep("", length(tax$Taxonomy)))
class <- c(rep("", length(tax$Taxonomy)))
order <- c(rep("", length(tax$Taxonomy)))
lineage <- c(rep("", length(tax$Taxonomy)))
clade <- c(rep("", length(tax$Taxonomy)))
tribe <- c(rep("", length(tax$Taxonomy)))
for(i in 1:length(sp)){
group <- sp[i][[1]]
kingdom[i] <- group[1]
phyla[i] <- group[2]
class[i] <- group[3]
order[i] <- group[4]
lineage[i] <- group[5]
clade[i] <- group[6]
tribe[i] <- group[7]
}
y <- data.frame(kingdom, phyla, class, order, lineage, clade, tribe, stringsAsFactors=F)
rownames(y) <- rownames(tax)
colnames(y) <- c("Kingdom", "Phylum", "Class", "Order", "Lineage", "Clade", "Tribe")
keep <- match(rownames(y), rownames(table))
y <- y[which(is.na(keep) == F)]
dim(y)
dim(otu_table)
length(keep)
keep <- match(rownames(y), rownames(table))
keep <- keep[which(is.na(keep) == F)]
y <- y[keep]
y <- y[keep, ]
head(y)
dim(y)
if(remove_bootstrap == T){
y$Kingdom <- gsub("\\(\\d*\\)", "", y$Kingdom)
y$Phylum <- gsub("\\(\\d*\\)", "", y$Phylum)
y$Class <- gsub("\\(\\d*\\)", "", y$Class)
y$Order <- gsub("\\(\\d*\\)", "", y$Order)
y$Lineage <- gsub("\\(\\d*\\)", "", y$Lineage)
y$Clade <- gsub("\\(\\d*\\)", "", y$Clade)
y$Tribe <- gsub("\\(\\d*\\)", "", y$Tribe)
}
head(y)
clean_mothur_taxonomy <- function(taxonomy_file, table, remove_bootstrap){
tax <- read.table(file=taxonomy_file, header=T, row.names=1, colClasses=c("character"))
tax$Size <- NULL
sp <- strsplit(tax$Taxonomy, split = ";")
kingdom <- c(rep("", length(tax$Taxonomy)))
phyla <- c(rep("", length(tax$Taxonomy)))
class <- c(rep("", length(tax$Taxonomy)))
order <- c(rep("", length(tax$Taxonomy)))
lineage <- c(rep("", length(tax$Taxonomy)))
clade <- c(rep("", length(tax$Taxonomy)))
tribe <- c(rep("", length(tax$Taxonomy)))
for(i in 1:length(sp)){
group <- sp[i][[1]]
kingdom[i] <- group[1]
phyla[i] <- group[2]
class[i] <- group[3]
order[i] <- group[4]
lineage[i] <- group[5]
clade[i] <- group[6]
tribe[i] <- group[7]
}
y <- data.frame(kingdom, phyla, class, order, lineage, clade, tribe, stringsAsFactors=F)
rownames(y) <- rownames(tax)
colnames(y) <- c("Kingdom", "Phylum", "Class", "Order", "Lineage", "Clade", "Tribe")
keep <- match(rownames(y), rownames(table))
keep <- keep[which(is.na(keep) == F)]
y <- y[keep, ]
if(remove_bootstrap == T){
y$Kingdom <- gsub("\\(\\d*\\)", "", y$Kingdom)
y$Phylum <- gsub("\\(\\d*\\)", "", y$Phylum)
y$Class <- gsub("\\(\\d*\\)", "", y$Class)
y$Order <- gsub("\\(\\d*\\)", "", y$Order)
y$Lineage <- gsub("\\(\\d*\\)", "", y$Lineage)
y$Clade <- gsub("\\(\\d*\\)", "", y$Clade)
y$Tribe <- gsub("\\(\\d*\\)", "", y$Tribe)
}
return(y)
}
clean_mothur_taxonomy(file.choose(), otu_table, T)
taxonomy_file <- file.choose()
tax <- read.csv(taxonomy_file, header = T, row.names = 1)
head(tax)
dim(tax)
keep <- match(rownames(tax), rownames(table))
keep <- keep[which(is.na(keep) == F)]
tax <- tax[keep, ]
dim(tax)
head(tax)
head(keep)
tax <- read.csv(taxonomy_file, header = T, row.names = 1)
colnames(tax) <- c("Kingdom", "Phylum", "Class", "Order", "Lineage", "Clade", "Tribe")
keep <- match(rownames(tax), rownames(table))
tax <- tax[which(is.na(keep) == F), ]
head(tax)
otu_nums <- as.numeric(substr(rownames(tax), start = 4, stop = 7))
head(otu_nums)
head(order(otu_nums))
head(rank(otu_nums))
tax <- tax[rank(otu_nums), ]
head(tax)
tax <- read.csv(taxonomy_file, header = T, row.names = 1)
colnames(tax) <- c("Kingdom", "Phylum", "Class", "Order", "Lineage", "Clade", "Tribe")
keep <- match(rownames(tax), rownames(table))
tax <- tax[which(is.na(keep) == F), ]
otu_nums <- as.numeric(substr(rownames(tax), start = 4, stop = 7))
tax <- tax[rank(otu_nums), ]
head(tax)
otu_nums
order(otu_nums)
head(order(otu_nums))
head(sort(otu_nums))
tax <- tax[order(otu_nums), ]
head(tax)
order(otu_nums)
tax <- read.csv(taxonomy_file, header = T, row.names = 1)
colnames(tax) <- c("Kingdom", "Phylum", "Class", "Order", "Lineage", "Clade", "Tribe")
keep <- match(rownames(tax), rownames(table))
tax <- tax[which(is.na(keep) == F), ]
otu_nums <- as.numeric(substr(rownames(tax), start = 4, stop = 7))
head(sort(rownames(tax)))
head(order(rownames(tax)))
tax <- tax[order(rownames(tax)), ]
head(tax)
clean_TaxAss_taxonomy <- function(taxonomy_file, table, remove_bootstrap){
tax <- read.csv(taxonomy_file, header = T, row.names = 1)
colnames(tax) <- c("Kingdom", "Phylum", "Class", "Order", "Lineage", "Clade", "Tribe")
keep <- match(rownames(tax), rownames(table))
tax <- tax[which(is.na(keep) == F), ]
tax <- tax[order(rownames(tax)), ]
if(remove_bootstrap == T){
y$Kingdom <- gsub("\\(\\d*\\)", "", y$Kingdom)
y$Phylum <- gsub("\\(\\d*\\)", "", y$Phylum)
y$Class <- gsub("\\(\\d*\\)", "", y$Class)
y$Order <- gsub("\\(\\d*\\)", "", y$Order)
y$Lineage <- gsub("\\(\\d*\\)", "", y$Lineage)
y$Clade <- gsub("\\(\\d*\\)", "", y$Clade)
y$Tribe <- gsub("\\(\\d*\\)", "", y$Tribe)
}
return(y)
}
test <- clean_TaxAss_taxonomy(taxonomy_file, otu_table, T)
head (Test)
head(test)
clean_mothur_taxonomy <- function(taxonomy_file, table, remove_bootstrap){
tax <- read.table(file=taxonomy_file, header=T, row.names=1, colClasses=c("character"))
tax$Size <- NULL
sp <- strsplit(tax$Taxonomy, split = ";")
kingdom <- c(rep("", length(tax$Taxonomy)))
phyla <- c(rep("", length(tax$Taxonomy)))
class <- c(rep("", length(tax$Taxonomy)))
order <- c(rep("", length(tax$Taxonomy)))
lineage <- c(rep("", length(tax$Taxonomy)))
clade <- c(rep("", length(tax$Taxonomy)))
tribe <- c(rep("", length(tax$Taxonomy)))
for(i in 1:length(sp)){
group <- sp[i][[1]]
kingdom[i] <- group[1]
phyla[i] <- group[2]
class[i] <- group[3]
order[i] <- group[4]
lineage[i] <- group[5]
clade[i] <- group[6]
tribe[i] <- group[7]
}
y <- data.frame(kingdom, phyla, class, order, lineage, clade, tribe, stringsAsFactors=F)
rownames(y) <- rownames(tax)
colnames(y) <- c("Kingdom", "Phylum", "Class", "Order", "Lineage", "Clade", "Tribe")
keep <- match(rownames(y), rownames(table))
y <- y[which(is.na(keep) == F), ]
y <- y[order(rownames(y)), ]
if(remove_bootstrap == T){
y$Kingdom <- gsub("\\(\\d*\\)", "", y$Kingdom)
y$Phylum <- gsub("\\(\\d*\\)", "", y$Phylum)
y$Class <- gsub("\\(\\d*\\)", "", y$Class)
y$Order <- gsub("\\(\\d*\\)", "", y$Order)
y$Lineage <- gsub("\\(\\d*\\)", "", y$Lineage)
y$Clade <- gsub("\\(\\d*\\)", "", y$Clade)
y$Tribe <- gsub("\\(\\d*\\)", "", y$Tribe)
}
return(y)
}
taxonomy_file <- file.choose()
test2 <- clean_mothur_taxonomy(taxonomy_file, otu_table, T)
head(test2)
test == test2
filter_taxa <- function(table, abundance, persistence){
pers <- c()
num_samples <- dim(table)[2]
meets_abun_threshold <- c()
abun_threshold <- sum(table[, 1]) * (abundance/100)
for(i in 1:dim(table)[1]){
# Calculate the percentage of samples present for each OTU
present <- length(which(table[i, ] > 0))
pers[i] <- present/num_samples * 100
meets_abun_threshold[i] <- length(which(table[i, ] >= abun_threshold)) > 0
}
filtered_table <- table[which(pers >= persistence & meets_abun_threshold == T), ]
return(filtered_table)
}
phylum_table <- combine_otus("Phylum", otu_table, taxonomy)
test <- filter_taxa(phylum_table, 1000, 90)
test <- filter_taxa(phylum_table, 500, 10)
head(rowSums(phylum_table))
head(phylum_table)
head(taxonomy)
str(taxonomy)
str(y)
taxonomy <- read.csv(file.choose(), header = T, row.names = 1, colClasses = c("character"))
head(taxonomy)
str(taxonomy)
use_data(taxonomy, overwrite = T)
data(taxonomy)
phylum_table <- combine_otus("Phylum", otu_table, taxonomy)
test <- filter_taxa(phylum_table, 1000, 90)
test <- filter_taxa(phylum_table, 500, 10)
head(phylum_table)
head(rownames(phylum_table))
phylum_table[1:10, 1:10]
str(phylum_table)
table <- phylum_table
abundance <- 500
persistence <- 10
pers <- c()
num_samples <- dim(table)[2]
meets_abun_threshold <- c()
abun_threshold <- sum(table[, 1]) * (abundance/100)
abun_threshold
abundance = 10
test <- filter_taxa(phylum_table, 10, 10)
test[,1:10]
install.packages("Rtools")
library(devtools)
find_rtools()
library(OTUtable)
library(devtools)
find_rtools()
find_rtools()
detach("OTUtable", unload = T)
detach("package:OTUtable", unload = T)
library(OTUtable)
library(OTUtable)
path <- file.choose()
citation("OTUtable")
help("citation")
citation(auto = meta)
library(OTUtable)
citation(OTUtable)
citation("OTUtable")
library(OTUtable)
citation(OTUtable)
citation("OTUtable")
citation("ggplot2")
citation("DESeq")
citation("phyloseq")
library(OTUtable)
citation("OTUtable")
library(OTUtable)
citation("OTUtable")
library(OTUtable)
citation("OTUtable")
